From 562d761cfacf8a5bdc03d112db27ee034455ff6e Mon Sep 17 00:00:00 2001
From: i l <ip@il.com>
Date: Tue, 26 Aug 2025 13:54:24 +0000
Subject: [PATCH 24/24] kernel: Linux 6.12.44-rc1


---
 ...6-powerpc-boot-fix-build-with-gcc-15.patch | 29 -----------
 ...e-IFF_NO_QUEUE-in-virtual-interfaces.patch |  2 +-
 ...t-phy-Constify-struct-mdio_device_id.patch |  2 +-
 .../721-net-add-packet-mangeling.patch        |  2 +-
 target/linux/generic/kernel-6.12              |  4 +-
 ...include-asm-rwonce.h-for-kernel-code.patch |  2 +-
 ...nd-Add-support-for-Etron-EM73D044VCx.patch |  2 +-
 ...iatek-fix-ppe-flow-accounting-for-L2.patch |  2 +-
 ...-bus-mhi-core-add-SBL-state-callback.patch |  2 +-
 ...reset-toggle-in-_core_reset-function.patch | 52 -------------------
 10 files changed, 9 insertions(+), 90 deletions(-)
 delete mode 100644 target/linux/generic/backport-6.12/220-v6.16-powerpc-boot-fix-build-with-gcc-15.patch
 delete mode 100644 target/linux/imx/patches-6.12/506-pending-PCI-imx6-Remove-apps_reset-toggle-in-_core_reset-function.patch

diff --git a/target/linux/generic/backport-6.12/220-v6.16-powerpc-boot-fix-build-with-gcc-15.patch b/target/linux/generic/backport-6.12/220-v6.16-powerpc-boot-fix-build-with-gcc-15.patch
deleted file mode 100644
index c5a563fd16..0000000000
--- a/target/linux/generic/backport-6.12/220-v6.16-powerpc-boot-fix-build-with-gcc-15.patch
+++ /dev/null
@@ -1,29 +0,0 @@
-From 5a821e2d69e26b51b7f3740b6b0c3462b8cacaff Mon Sep 17 00:00:00 2001
-From: Michal Suchanek <msuchanek@suse.de>
-Date: Mon, 31 Mar 2025 12:57:19 +0200
-Subject: [PATCH] powerpc/boot: Fix build with gcc 15
-
-Similar to x86 the ppc boot code does not build with GCC 15.
-
-Copy the fix from
-commit ee2ab467bddf ("x86/boot: Use '-std=gnu11' to fix build with GCC 15")
-
-Signed-off-by: Michal Suchanek <msuchanek@suse.de>
-Tested-by: Amit Machhiwal <amachhiw@linux.ibm.com>
-Tested-by: Venkat Rao Bagalkote <venkat88@linux.ibm.com>
-Signed-off-by: Madhavan Srinivasan <maddy@linux.ibm.com>
-Link: https://patch.msgid.link/20250331105722.19709-1-msuchanek@suse.de
----
- arch/powerpc/boot/Makefile | 1 +
- 1 file changed, 1 insertion(+)
-
---- a/arch/powerpc/boot/Makefile
-+++ b/arch/powerpc/boot/Makefile
-@@ -70,6 +70,7 @@ BOOTCPPFLAGS	:= -nostdinc $(LINUXINCLUDE
- BOOTCPPFLAGS	+= -isystem $(shell $(BOOTCC) -print-file-name=include)
- 
- BOOTCFLAGS	:= $(BOOTTARGETFLAGS) \
-+		   -std=gnu11 \
- 		   -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \
- 		   -fno-strict-aliasing -O2 \
- 		   -msoft-float -mno-altivec -mno-vsx \
diff --git a/target/linux/generic/backport-6.12/620-v6.15-ppp-use-IFF_NO_QUEUE-in-virtual-interfaces.patch b/target/linux/generic/backport-6.12/620-v6.15-ppp-use-IFF_NO_QUEUE-in-virtual-interfaces.patch
index 6d9ac56cf0..d8c09daf9c 100644
--- a/target/linux/generic/backport-6.12/620-v6.15-ppp-use-IFF_NO_QUEUE-in-virtual-interfaces.patch
+++ b/target/linux/generic/backport-6.12/620-v6.15-ppp-use-IFF_NO_QUEUE-in-virtual-interfaces.patch
@@ -24,7 +24,7 @@ Signed-off-by: Jakub Kicinski <kuba@kernel.org>
 
 --- a/drivers/net/ppp/ppp_generic.c
 +++ b/drivers/net/ppp/ppp_generic.c
-@@ -3500,6 +3500,10 @@ ppp_connect_channel(struct channel *pch,
+@@ -3504,6 +3504,10 @@ ppp_connect_channel(struct channel *pch,
  		ret = -ENOTCONN;
  		goto outl;
  	}
diff --git a/target/linux/generic/backport-6.12/720-09-v6.14-net-phy-Constify-struct-mdio_device_id.patch b/target/linux/generic/backport-6.12/720-09-v6.14-net-phy-Constify-struct-mdio_device_id.patch
index aa5fc662fa..c010e87a7b 100644
--- a/target/linux/generic/backport-6.12/720-09-v6.14-net-phy-Constify-struct-mdio_device_id.patch
+++ b/target/linux/generic/backport-6.12/720-09-v6.14-net-phy-Constify-struct-mdio_device_id.patch
@@ -502,7 +502,7 @@ Signed-off-by: Jakub Kicinski <kuba@kernel.org>
  	{ }
 --- a/drivers/net/phy/mscc/mscc_main.c
 +++ b/drivers/net/phy/mscc/mscc_main.c
-@@ -2700,7 +2700,7 @@ static struct phy_driver vsc85xx_driver[
+@@ -2712,7 +2712,7 @@ static struct phy_driver vsc85xx_driver[
  
  module_phy_driver(vsc85xx_driver);
  
diff --git a/target/linux/generic/hack-6.12/721-net-add-packet-mangeling.patch b/target/linux/generic/hack-6.12/721-net-add-packet-mangeling.patch
index 9430070457..fee5641cbd 100644
--- a/target/linux/generic/hack-6.12/721-net-add-packet-mangeling.patch
+++ b/target/linux/generic/hack-6.12/721-net-add-packet-mangeling.patch
@@ -97,7 +97,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	help
 --- a/net/core/dev.c
 +++ b/net/core/dev.c
-@@ -3646,6 +3646,11 @@ static int xmit_one(struct sk_buff *skb,
+@@ -3658,6 +3658,11 @@ static int xmit_one(struct sk_buff *skb,
  	if (dev_nit_active(dev))
  		dev_queue_xmit_nit(skb, dev);
  
diff --git a/target/linux/generic/kernel-6.12 b/target/linux/generic/kernel-6.12
index 78b4d39332..6d40205f7d 100644
--- a/target/linux/generic/kernel-6.12
+++ b/target/linux/generic/kernel-6.12
@@ -1,2 +1,2 @@
-LINUX_VERSION-6.12 = .43
-LINUX_KERNEL_HASH-6.12.43 = 0fcbbbbcd456e87bbbfc8bf37af541fda62ccfcce76903503424fd101ef7bdee
+LINUX_VERSION-6.12 = .44
+LINUX_KERNEL_HASH-6.12.44 = b650210ed3027b224969d148aa377452a9aad3ae7f2851abedd31adfef16bdae
diff --git a/target/linux/generic/pending-6.12/100-compiler.h-only-include-asm-rwonce.h-for-kernel-code.patch b/target/linux/generic/pending-6.12/100-compiler.h-only-include-asm-rwonce.h-for-kernel-code.patch
index 1a552bdc33..725e223495 100644
--- a/target/linux/generic/pending-6.12/100-compiler.h-only-include-asm-rwonce.h-for-kernel-code.patch
+++ b/target/linux/generic/pending-6.12/100-compiler.h-only-include-asm-rwonce.h-for-kernel-code.patch
@@ -20,7 +20,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  #endif /* __KERNEL__ */
  
  /**
-@@ -306,6 +308,4 @@ static inline void *offset_to_ptr(const
+@@ -298,6 +300,4 @@ static inline void *offset_to_ptr(const
   */
  #define prevent_tail_call_optimization()	mb()
  
diff --git a/target/linux/generic/pending-6.12/487-mtd-spinand-Add-support-for-Etron-EM73D044VCx.patch b/target/linux/generic/pending-6.12/487-mtd-spinand-Add-support-for-Etron-EM73D044VCx.patch
index 0eb45822e2..cc23125b3d 100644
--- a/target/linux/generic/pending-6.12/487-mtd-spinand-Add-support-for-Etron-EM73D044VCx.patch
+++ b/target/linux/generic/pending-6.12/487-mtd-spinand-Add-support-for-Etron-EM73D044VCx.patch
@@ -49,7 +49,7 @@ Submitted-by: Daniel Danzberger <daniel@dd-wrt.com>
  obj-$(CONFIG_MTD_SPI_NAND) += spinand.o
 --- a/drivers/mtd/nand/spi/core.c
 +++ b/drivers/mtd/nand/spi/core.c
-@@ -1112,6 +1112,7 @@ static const struct spinand_manufacturer
+@@ -1115,6 +1115,7 @@ static const struct spinand_manufacturer
  	&alliancememory_spinand_manufacturer,
  	&ato_spinand_manufacturer,
  	&esmt_c8_spinand_manufacturer,
diff --git a/target/linux/generic/pending-6.12/736-04-net-ethernet-mediatek-fix-ppe-flow-accounting-for-L2.patch b/target/linux/generic/pending-6.12/736-04-net-ethernet-mediatek-fix-ppe-flow-accounting-for-L2.patch
index 1916613e54..9141fa69b0 100644
--- a/target/linux/generic/pending-6.12/736-04-net-ethernet-mediatek-fix-ppe-flow-accounting-for-L2.patch
+++ b/target/linux/generic/pending-6.12/736-04-net-ethernet-mediatek-fix-ppe-flow-accounting-for-L2.patch
@@ -309,7 +309,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		seq_printf(m, "%05x %s %7s", i,
 --- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
 +++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
-@@ -520,24 +520,21 @@ static int
+@@ -522,24 +522,21 @@ static int
  mtk_flow_offload_stats(struct mtk_eth *eth, struct flow_cls_offload *f)
  {
  	struct mtk_flow_entry *entry;
diff --git a/target/linux/generic/pending-6.12/790-bus-mhi-core-add-SBL-state-callback.patch b/target/linux/generic/pending-6.12/790-bus-mhi-core-add-SBL-state-callback.patch
index fe0f260ae3..80d1306115 100644
--- a/target/linux/generic/pending-6.12/790-bus-mhi-core-add-SBL-state-callback.patch
+++ b/target/linux/generic/pending-6.12/790-bus-mhi-core-add-SBL-state-callback.patch
@@ -20,7 +20,7 @@ Signed-off-by: Robert Marko <robimarko@gmail.com>
 
 --- a/drivers/bus/mhi/host/main.c
 +++ b/drivers/bus/mhi/host/main.c
-@@ -906,6 +906,7 @@ int mhi_process_ctrl_ev_ring(struct mhi_
+@@ -916,6 +916,7 @@ int mhi_process_ctrl_ev_ring(struct mhi_
  			switch (event) {
  			case MHI_EE_SBL:
  				st = DEV_ST_TRANSITION_SBL;
diff --git a/target/linux/imx/patches-6.12/506-pending-PCI-imx6-Remove-apps_reset-toggle-in-_core_reset-function.patch b/target/linux/imx/patches-6.12/506-pending-PCI-imx6-Remove-apps_reset-toggle-in-_core_reset-function.patch
deleted file mode 100644
index 234a028c4f..0000000000
--- a/target/linux/imx/patches-6.12/506-pending-PCI-imx6-Remove-apps_reset-toggle-in-_core_reset-function.patch
+++ /dev/null
@@ -1,52 +0,0 @@
-From d8588b5b9fddffd51962c13db7d00ae6f2ac945b Mon Sep 17 00:00:00 2001
-From: Tim Harvey <tharvey@gateworks.com>
-Date: Thu, 19 Jun 2025 16:04:53 -0700
-Subject: [PATCH] PCI: imx6: Remove apps_reset toggle in _core_reset functions
-
-apps_reset is LTSSM_EN on i.MX7, i.MX8MQ, i.MX8MM and i.MX8MP platforms.
-Since the assertion/de-assertion of apps_reset(LTSSM_EN bit) had been
-wrappered in imx_pcie_ltssm_enable() and imx_pcie_ltssm_disable();
-
-Remove apps_reset toggle in imx_pcie_assert_core_reset() and
-imx_pcie_deassert_core_reset() functions. Use imx_pcie_ltssm_enable()
-and imx_pcie_ltssm_disable() to configure apps_reset directly.
-
-Fix fail to enumerate reliably PI7C9X2G608GP (hotplug) at i.MX8MM, which
-reported By Tim.
-
-Reported-by: Tim Harvey <tharvey@gateworks.com>
-Closes: https://lore.kernel.org/all/CAJ+vNU3ohR2YKTwC4xoYrc1z-neDoH2TTZcMHDy+poj9=jSy+w@mail.gmail.com/
-Fixes: ef61c7d8d032 ("PCI: imx6: Deassert apps_reset in imx_pcie_deassert_core_reset()")
-Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
----
- drivers/pci/controller/dwc/pci-imx6.c | 5 +++--
- 1 file changed, 3 insertions(+), 2 deletions(-)
-
---- a/drivers/pci/controller/dwc/pci-imx6.c
-+++ b/drivers/pci/controller/dwc/pci-imx6.c
-@@ -778,7 +778,6 @@ static int imx7d_pcie_core_reset(struct
- static void imx_pcie_assert_core_reset(struct imx_pcie *imx_pcie)
- {
- 	reset_control_assert(imx_pcie->pciephy_reset);
--	reset_control_assert(imx_pcie->apps_reset);
- 
- 	if (imx_pcie->drvdata->core_reset)
- 		imx_pcie->drvdata->core_reset(imx_pcie, true);
-@@ -790,7 +789,6 @@ static void imx_pcie_assert_core_reset(s
- static int imx_pcie_deassert_core_reset(struct imx_pcie *imx_pcie)
- {
- 	reset_control_deassert(imx_pcie->pciephy_reset);
--	reset_control_deassert(imx_pcie->apps_reset);
- 
- 	if (imx_pcie->drvdata->core_reset)
- 		imx_pcie->drvdata->core_reset(imx_pcie, false);
-@@ -991,6 +989,9 @@ static int imx_pcie_host_init(struct dw_
- 		}
- 	}
- 
-+	/* Make sure that PCIe LTSSM is cleared */
-+	imx_pcie_ltssm_disable(dev);
-+
- 	ret = imx_pcie_deassert_core_reset(imx_pcie);
- 	if (ret < 0) {
- 		dev_err(dev, "pcie deassert core reset failed: %d\n", ret);
-- 
2.48.1

