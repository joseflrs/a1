From 737de7631309d0146f38da580e8f1d0fecac80f8 Mon Sep 17 00:00:00 2001
From: i l <il@il.com>
Date: Wed, 17 Sep 2025 16:56:31 -0300
Subject: [PATCH 10/10] mac80211: update to version 6.16.12

---
 package/kernel/mac80211/Makefile              |   6 +-
 ...21-ath10k_init_devices_synchronously.patch |   2 +-
 .../930-ath10k_add_tpt_led_trigger.patch      |   4 +-
 ...75-ath10k-use-tpt-trigger-by-default.patch |   4 +-
 ...h10k-Try-to-get-mac-address-from-dts.patch |   2 +-
 ...k-always-use-mac80211-loss-detection.patch |   2 +-
 ...apped-ce-accessing-issue-on-64bit-OS.patch |   4 +-
 ...h11k-add-multipd-support-for-QCN6122.patch |   2 +-
 ...k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch |   6 +-
 ...k-fix-5GHz-operation-on-wideband-QCN.patch |   2 +-
 ...k-push-HE-MU-MIMO-params-to-hardware.patch |  16 +-
 ...-push-EHT-MU-MIMO-params-to-hardware.patch |   4 +-
 ...HE-MCS-mapper-to-a-separate-function.patch |   4 +-
 ...and-tx-mcs-maps-for-supported-HE-mcs.patch |   6 +-
 ...X-MCS-rate-configurations-in-HE-mode.patch |   4 +-
 ...ort-for-setting-fixed-HE-rate-GI-LTF.patch |  68 +--
 ...7-wifi-ath12k-clean-up-80P80-support.patch |  18 +-
 ...2k-add-support-for-160-MHz-bandwidth.patch |  22 +-
 ...ed-NSS-bandwidth-support-for-160-MHz.patch |   8 +-
 ...fer-a-ccode-from-OTP-over-nvram-file.patch |   2 +-
 ...mfmac-disable-dump_survey-on-bcm2835.patch |   6 +-
 ...700-mwl8k-missing-pci-id-for-WNR854T.patch |   2 +-
 .../801-libertas-configure-sysfs-links.patch  |   2 +-
 .../802-libertas-set-wireless-macaddr.patch   |   2 +-
 ...940-mwl8k_init_devices_synchronously.patch |   4 +-
 ...8-pci-add-PCI-Express-error-handling.patch | 144 +++++++
 ...88-Rename-the-RTW_WCPU_11-AC-N-enums.patch | 399 ++++++++++++++++++
 ...le-AP-and-adhoc-modes-for-SDIO-again.patch |  52 +++
 ...Use-bitwise-instead-of-arithmetic-op.patch |  61 +++
 ...e-TX-reports-for-the-management-queu.patch | 225 ++++++++++
 ...use-indirect-IO-for-device-registers.patch |  42 ++
 ...-rtwdev-mutex-before-setting-the-LED.patch |  57 +++
 ...ed-brightness_set_blocking-for-PCI-t.patch | 101 +++++
 .../110-mac80211_keep_keys_on_stop_ap.patch   |   2 +-
 .../patches/subsys/130-disable_auto_vif.patch |   2 +-
 .../mac80211/patches/subsys/210-ap_scan.patch |   2 +-
 ...crease-quantum-for-airtime-scheduler.patch |   6 +-
 ...race-period-for-DFS-available-after-.patch |   4 +-
 ...dd-AQL-support-for-broadcast-packets.patch |  16 +-
 ...ac80211-Do-not-schedule-stopped-TXQs.patch |  36 --
 ...n-t-call-fq_flow_idx-for-management-.patch |  33 --
 ...eck-802.11-encaps-offloading-in-ieee.patch |  32 --
 ...80211-Update-skb-s-control-block-key.patch |  27 --
 ...d-link-iteration-macro-for-link-data.patch |   2 +-
 ...211-extend-beacon-monitoring-for-MLO.patch |   4 +-
 ...extend-connection-monitoring-for-MLO.patch |   6 +-
 ...ke-CONNECTION_MONITOR-optional-for-M.patch |   2 +-
 ...llow-scanning-while-on-radar-channel.patch |  14 +-
 ...out-part-of-ieee80211_calc_expected_.patch |   2 +-
 ...d-MLO-support-to-ieee80211_probe_cli.patch |   6 +-
 50 files changed, 1216 insertions(+), 263 deletions(-)
 create mode 100644 package/kernel/mac80211/patches/rtl/0001-wifi-rtw88-pci-add-PCI-Express-error-handling.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0002-wifi-rtw88-Rename-the-RTW_WCPU_11-AC-N-enums.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0003-wifi-rtw88-Enable-AP-and-adhoc-modes-for-SDIO-again.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0005-wifi-rtw88-coex-Use-bitwise-instead-of-arithmetic-op.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0006-wifi-rtw88-enable-TX-reports-for-the-management-queu.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0008-wifi-rtw88-sdio-use-indirect-IO-for-device-registers.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0009-wifi-rtw88-Lock-rtwdev-mutex-before-setting-the-LED.patch
 create mode 100644 package/kernel/mac80211/patches/rtl/0010-wifi-rtw88-Use-led-brightness_set_blocking-for-PCI-t.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/330-wifi-mac80211-Do-not-schedule-stopped-TXQs.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/331-wifi-mac80211-Don-t-call-fq_flow_idx-for-management-.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/332-wifi-mac80211-Check-802.11-encaps-offloading-in-ieee.patch
 delete mode 100644 package/kernel/mac80211/patches/subsys/333-Reapply-wifi-mac80211-Update-skb-s-control-block-key.patch

diff --git a/package/kernel/mac80211/Makefile b/package/kernel/mac80211/Makefile
index 77a88cf853..9b7253d615 100644
--- a/package/kernel/mac80211/Makefile
+++ b/package/kernel/mac80211/Makefile
@@ -10,13 +10,13 @@ include $(INCLUDE_DIR)/kernel.mk
 
 PKG_NAME:=mac80211
 
-PKG_VERSION:=6.16
+PKG_VERSION:=6.16.12
 PKG_RELEASE:=1
 PKG_LICENSE:=GPL-2.0-only
 PKG_LICENSE_FILES:=COPYING
 
-PKG_SOURCE_URL:=@OPENWRT
-PKG_HASH:=67f11320509dd18e5e2c58cb81e9f6c7d19b09f5229baa5880ed4dab71c19052
+PKG_SOURCE_URL:=https://github.com/mj22226/backports/releases/download/v6.16.12-rc1/
+PKG_HASH:=50986615cc1bb471838ef46dd7fc4cbc0491762908982749307050f2ad6f8abf
 
 PKG_SOURCE:=backports-$(PKG_VERSION).tar.xz
 PKG_BUILD_DIR:=$(KERNEL_BUILD_DIR)/$(if $(BUILD_VARIANT),$(PKG_NAME)-$(BUILD_VARIANT)/)backports-$(PKG_VERSION)
diff --git a/package/kernel/mac80211/patches/ath10k/921-ath10k_init_devices_synchronously.patch b/package/kernel/mac80211/patches/ath10k/921-ath10k_init_devices_synchronously.patch
index 1fb9d50376..889e6aa634 100644
--- a/package/kernel/mac80211/patches/ath10k/921-ath10k_init_devices_synchronously.patch
+++ b/package/kernel/mac80211/patches/ath10k/921-ath10k_init_devices_synchronously.patch
@@ -14,7 +14,7 @@ Signed-off-by: Sven Eckelmann <sven@open-mesh.com>
 
 --- a/drivers/net/wireless/ath/ath10k/core.c
 +++ b/drivers/net/wireless/ath/ath10k/core.c
-@@ -3546,6 +3546,16 @@ int ath10k_core_register(struct ath10k *
+@@ -3584,6 +3584,16 @@ int ath10k_core_register(struct ath10k *
  
  	queue_work(ar->workqueue, &ar->register_work);
  
diff --git a/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch b/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
index 89d0c5ca37..7a978b9fa9 100644
--- a/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
+++ b/package/kernel/mac80211/patches/ath10k/930-ath10k_add_tpt_led_trigger.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -9951,6 +9951,21 @@ static int ath10k_mac_init_rd(struct ath
+@@ -9956,6 +9956,21 @@ static int ath10k_mac_init_rd(struct ath
  	return 0;
  }
  
@@ -22,7 +22,7 @@
  int ath10k_mac_register(struct ath10k *ar)
  {
  	static const u32 cipher_suites[] = {
-@@ -10313,6 +10328,12 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10318,6 +10333,12 @@ int ath10k_mac_register(struct ath10k *a
  
  	ar->hw->weight_multiplier = ATH10K_AIRTIME_WEIGHT_MULTIPLIER;
  
diff --git a/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch b/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
index 938be272ff..6b2fc78de0 100644
--- a/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
+++ b/package/kernel/mac80211/patches/ath10k/975-ath10k-use-tpt-trigger-by-default.patch
@@ -16,7 +16,7 @@ Signed-off-by: Mathias Kresin <dev@kresin.me>
 
 --- a/drivers/net/wireless/ath/ath10k/core.h
 +++ b/drivers/net/wireless/ath/ath10k/core.h
-@@ -1315,6 +1315,10 @@ struct ath10k {
+@@ -1320,6 +1320,10 @@ struct ath10k {
  	s32 tx_power_2g_limit;
  	s32 tx_power_5g_limit;
  
@@ -40,7 +40,7 @@ Signed-off-by: Mathias Kresin <dev@kresin.me>
  	if (ret)
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -10329,7 +10329,7 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10334,7 +10334,7 @@ int ath10k_mac_register(struct ath10k *a
  	ar->hw->weight_multiplier = ATH10K_AIRTIME_WEIGHT_MULTIPLIER;
  
  #ifdef CPTCFG_MAC80211_LEDS
diff --git a/package/kernel/mac80211/patches/ath10k/984-ath10k-Try-to-get-mac-address-from-dts.patch b/package/kernel/mac80211/patches/ath10k/984-ath10k-Try-to-get-mac-address-from-dts.patch
index 6cb1038e2b..c753b23917 100644
--- a/package/kernel/mac80211/patches/ath10k/984-ath10k-Try-to-get-mac-address-from-dts.patch
+++ b/package/kernel/mac80211/patches/ath10k/984-ath10k-Try-to-get-mac-address-from-dts.patch
@@ -26,7 +26,7 @@ Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
  #include <linux/property.h>
  #include <linux/dmi.h>
  #include <linux/ctype.h>
-@@ -3418,6 +3419,8 @@ static int ath10k_core_probe_fw(struct a
+@@ -3456,6 +3457,8 @@ static int ath10k_core_probe_fw(struct a
  
  	device_get_mac_address(ar->dev, ar->mac_addr);
  
diff --git a/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch b/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
index 661fc86e16..2f32939c08 100644
--- a/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
+++ b/package/kernel/mac80211/patches/ath10k/988-ath10k-always-use-mac80211-loss-detection.patch
@@ -18,7 +18,7 @@ Signed-off-by: David Bauer <mail@david-bauer.net>
 
 --- a/drivers/net/wireless/ath/ath10k/mac.c
 +++ b/drivers/net/wireless/ath/ath10k/mac.c
-@@ -10121,7 +10121,6 @@ int ath10k_mac_register(struct ath10k *a
+@@ -10126,7 +10126,6 @@ int ath10k_mac_register(struct ath10k *a
  	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
  	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
  	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
diff --git a/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch b/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
index 5878fa08df..bff4e1b8a5 100644
--- a/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
+++ b/package/kernel/mac80211/patches/ath11k/910-ath11k-fix-remapped-ce-accessing-issue-on-64bit-OS.patch
@@ -65,7 +65,7 @@ Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
  	if (ce_attr->src_nentries)
 --- a/drivers/net/wireless/ath/ath11k/hal.c
 +++ b/drivers/net/wireless/ath/ath11k/hal.c
-@@ -1247,20 +1247,16 @@ static int ath11k_hal_srng_create_config
+@@ -1272,20 +1272,16 @@ static int ath11k_hal_srng_create_config
  	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_STATUS_RING_HP;
  
  	s = &hal->srng_config[HAL_CE_SRC];
@@ -90,7 +90,7 @@ Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
  	s->reg_size[0] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
  		HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab);
  	s->reg_size[1] = HAL_SEQ_WCSS_UMAC_CE1_DST_REG(ab) -
-@@ -1268,9 +1264,8 @@ static int ath11k_hal_srng_create_config
+@@ -1293,9 +1289,8 @@ static int ath11k_hal_srng_create_config
  
  	s = &hal->srng_config[HAL_CE_DST_STATUS];
  	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_CE0_DST_REG(ab) +
diff --git a/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch b/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
index e67e4a7e8b..1a6b77131e 100644
--- a/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
+++ b/package/kernel/mac80211/patches/ath11k/924-wifi-ath11k-add-multipd-support-for-QCN6122.patch
@@ -89,7 +89,7 @@ Signed-off-by: George Moussalem <george.moussalem@outlook.com>
  /* SMBIOS type containing Board Data File Name Extension */
  #define ATH11K_SMBIOS_BDF_EXT_TYPE 0xF8
  
-@@ -966,6 +969,7 @@ struct ath11k_base {
+@@ -968,6 +971,7 @@ struct ath11k_base {
  	struct list_head peers;
  	wait_queue_head_t peer_mapping_wq;
  	u8 mac_addr[ETH_ALEN];
diff --git a/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch b/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
index 9bbc75247d..4c054f93ff 100644
--- a/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
+++ b/package/kernel/mac80211/patches/ath12k/102-wifi-ath12k-limit-WMI_SCAN_CHAN_LIST_CMDID-arg.patch
@@ -130,7 +130,7 @@ Best regards,
 
 --- a/drivers/net/wireless/ath/ath12k/wmi.c
 +++ b/drivers/net/wireless/ath/ath12k/wmi.c
-@@ -2832,6 +2832,9 @@ int ath12k_wmi_send_scan_chan_list_cmd(s
+@@ -2881,6 +2881,9 @@ int ath12k_wmi_send_scan_chan_list_cmd(s
  		max_chan_limit = (wmi->wmi_ab->max_msg_len[ar->pdev_idx] - len) /
  			sizeof(*chan_info);
  
@@ -142,12 +142,12 @@ Best regards,
  		arg->nallchans -= num_send_chans;
 --- a/drivers/net/wireless/ath/ath12k/wmi.h
 +++ b/drivers/net/wireless/ath/ath12k/wmi.h
-@@ -3947,6 +3947,8 @@ struct wmi_stop_scan_cmd {
+@@ -3948,6 +3948,8 @@ struct wmi_stop_scan_cmd {
  	__le32 pdev_id;
  } __packed;
  
 +#define WMI_MAX_NUM_CHAN_PER_WMI_CMD	58
 +
  struct ath12k_wmi_scan_chan_list_arg {
+ 	struct list_head list;
  	u32 pdev_id;
- 	u16 nallchans;
diff --git a/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch b/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
index 71b8f86eed..6639acbf21 100644
--- a/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
+++ b/package/kernel/mac80211/patches/ath12k/103-wifi-ath12k-fix-5GHz-operation-on-wideband-QCN.patch
@@ -124,7 +124,7 @@ Best regards,
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -6985,9 +6985,7 @@ static void ath12k_mac_setup_ht_vht_cap(
+@@ -7086,9 +7086,7 @@ static void ath12k_mac_setup_ht_vht_cap(
  						    rate_cap_rx_chainmask);
  	}
  
diff --git a/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch b/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
index 9fdc89960d..a3bd010eea 100644
--- a/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-1-wifi-ath12k-push-HE-MU-MIMO-params-to-hardware.patch
@@ -131,7 +131,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -3173,6 +3173,125 @@ static u32 ath12k_mac_ieee80211_sta_bw_t
+@@ -3191,6 +3191,125 @@ static u32 ath12k_mac_ieee80211_sta_bw_t
  	return bw;
  }
  
@@ -257,7 +257,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  static void ath12k_bss_assoc(struct ath12k *ar,
  			     struct ath12k_link_vif *arvif,
  			     struct ieee80211_bss_conf *bss_conf)
-@@ -3187,6 +3306,7 @@ static void ath12k_bss_assoc(struct ath1
+@@ -3205,6 +3324,7 @@ static void ath12k_bss_assoc(struct ath1
  	struct ath12k_sta *ahsta;
  	struct ath12k_peer *peer;
  	bool is_auth = false;
@@ -265,7 +265,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	int ret;
  
  	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
-@@ -3230,8 +3350,26 @@ static void ath12k_bss_assoc(struct ath1
+@@ -3248,8 +3368,26 @@ static void ath12k_bss_assoc(struct ath1
  
  	ath12k_peer_assoc_prepare(ar, arvif, arsta, peer_arg, false);
  
@@ -289,10 +289,10 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 +		return;
 +	}
 +
+ 	peer_arg->is_assoc = true;
  	ret = ath12k_wmi_send_peer_assoc_cmd(ar, peer_arg);
  	if (ret) {
- 		ath12k_warn(ar->ab, "failed to run peer assoc for %pM vdev %i: %d\n",
-@@ -3850,6 +3988,13 @@ static void ath12k_mac_bss_info_changed(
+@@ -3892,6 +4030,13 @@ static void ath12k_mac_bss_info_changed(
  		ether_addr_copy(arvif->bssid, info->bssid);
  
  	if (changed & BSS_CHANGED_BEACON_ENABLED) {
@@ -306,7 +306,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		ath12k_control_beaconing(arvif, info);
  
  		if (arvif->is_up && info->he_support &&
-@@ -7151,11 +7296,14 @@ static void ath12k_mac_copy_he_cap(struc
+@@ -7252,11 +7397,14 @@ static void ath12k_mac_copy_he_cap(struc
  
  	he_cap_elem->mac_cap_info[1] &=
  		IEEE80211_HE_MAC_CAP1_TF_MAC_PAD_DUR_MASK;
@@ -324,7 +324,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	he_cap_elem->phy_cap_info[5] |= num_tx_chains - 1;
  
  	switch (iftype) {
-@@ -8454,72 +8602,6 @@ static int ath12k_mac_setup_vdev_create_
+@@ -8566,72 +8714,6 @@ static int ath12k_mac_setup_vdev_create_
  	return 0;
  }
  
@@ -397,7 +397,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  static void ath12k_mac_update_vif_offload(struct ath12k_link_vif *arvif)
  {
  	struct ath12k_vif *ahvif = arvif->ahvif;
-@@ -9706,14 +9788,6 @@ ath12k_mac_vdev_start_restart(struct ath
+@@ -9818,14 +9900,6 @@ ath12k_mac_vdev_start_restart(struct ath
  		spin_unlock_bh(&ab->base_lock);
  
  		/* TODO: Notify if secondary 80Mhz also needs radar detection */
diff --git a/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch b/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
index d11e94f8db..3733e82227 100644
--- a/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-2-wifi-ath12k-push-EHT-MU-MIMO-params-to-hardware.patch
@@ -131,7 +131,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -3292,6 +3292,58 @@ static int ath12k_mac_vif_recalc_sta_he_
+@@ -3310,6 +3310,58 @@ static int ath12k_mac_vif_recalc_sta_he_
  	return 0;
  }
  
@@ -190,7 +190,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  static void ath12k_bss_assoc(struct ath12k *ar,
  			     struct ath12k_link_vif *arvif,
  			     struct ieee80211_bss_conf *bss_conf)
-@@ -3994,6 +4046,12 @@ static void ath12k_mac_bss_info_changed(
+@@ -4036,6 +4088,12 @@ static void ath12k_mac_bss_info_changed(
  				ath12k_warn(ar->ab,
  					    "failed to set HE TXBF config for vdev: %d\n",
  					    arvif->vdev_id);
diff --git a/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch b/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
index bf72cefca2..38b670ea2b 100644
--- a/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-3-wifi-ath12k-move-HE-MCS-mapper-to-a-separate-function.patch
@@ -130,7 +130,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -7339,12 +7339,24 @@ static __le16 ath12k_mac_setup_he_6ghz_c
+@@ -7440,12 +7440,24 @@ static __le16 ath12k_mac_setup_he_6ghz_c
  	return cpu_to_le16(bcap->he_6ghz_capa);
  }
  
@@ -156,7 +156,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	he_cap->has_he = true;
  	memcpy(he_cap_elem->mac_cap_info, band_cap->he_cap_info,
-@@ -7384,13 +7396,7 @@ static void ath12k_mac_copy_he_cap(struc
+@@ -7485,13 +7497,7 @@ static void ath12k_mac_copy_he_cap(struc
  		break;
  	}
  
diff --git a/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch b/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
index d85077af3f..9e54609fd6 100644
--- a/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-4-wifi-ath12k-generate-rx-and-tx-mcs-maps-for-supported-HE-mcs.patch
@@ -128,7 +128,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -7339,20 +7339,40 @@ static __le16 ath12k_mac_setup_he_6ghz_c
+@@ -7440,20 +7440,40 @@ static __le16 ath12k_mac_setup_he_6ghz_c
  	return cpu_to_le16(bcap->he_6ghz_capa);
  }
  
@@ -177,7 +177,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  				   int iftype, u8 num_tx_chains,
  				   struct ieee80211_sta_he_cap *he_cap)
  {
-@@ -7396,7 +7416,7 @@ static void ath12k_mac_copy_he_cap(struc
+@@ -7497,7 +7517,7 @@ static void ath12k_mac_copy_he_cap(struc
  		break;
  	}
  
@@ -186,7 +186,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	memset(he_cap->ppe_thres, 0, sizeof(he_cap->ppe_thres));
  	if (he_cap_elem->phy_cap_info[6] &
  	    IEEE80211_HE_PHY_CAP6_PPE_THRESHOLD_PRESENT)
-@@ -7586,7 +7606,7 @@ static int ath12k_mac_copy_sband_iftype_
+@@ -7687,7 +7707,7 @@ static int ath12k_mac_copy_sband_iftype_
  
  		data[idx].types_mask = BIT(i);
  
diff --git a/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch b/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
index 49ef320c25..53ae3a2888 100644
--- a/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-5-wifi-ath12k-fix-TX-and-RX-MCS-rate-configurations-in-HE-mode.patch
@@ -127,7 +127,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/wmi.c
 +++ b/drivers/net/wireless/ath/ath12k/wmi.c
-@@ -2333,8 +2333,8 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
+@@ -2381,8 +2381,8 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
  		he_mcs->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_HE_RATE_SET,
  							    sizeof(*he_mcs));
  
@@ -140,7 +140,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
 --- a/drivers/net/wireless/ath/ath12k/wmi.h
 +++ b/drivers/net/wireless/ath/ath12k/wmi.h
-@@ -4157,7 +4157,9 @@ struct ath12k_wmi_vht_rate_set_params {
+@@ -4171,7 +4171,9 @@ struct ath12k_wmi_vht_rate_set_params {
  
  struct ath12k_wmi_he_rate_set_params {
  	__le32 tlv_header;
diff --git a/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch b/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
index b7ad233e2e..c9036dc855 100644
--- a/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-6-wifi-ath12k-add-support-for-setting-fixed-HE-rate-GI-LTF.patch
@@ -146,7 +146,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  static u8 ath12k_parse_mpdudensity(u8 mpdudensity)
  {
  /*  From IEEE Std 802.11-2020 defined values for "Minimum MPDU Start Spacing":
-@@ -2053,9 +2065,15 @@ static void ath12k_peer_assoc_h_ht(struc
+@@ -2071,9 +2083,15 @@ static void ath12k_peer_assoc_h_ht(struc
  		arg->peer_rate_caps |= WMI_HOST_RC_CW40_FLAG;
  	}
  
@@ -165,7 +165,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  			arg->peer_rate_caps |= WMI_HOST_RC_SGI_FLAG;
  	}
  
-@@ -2178,11 +2196,12 @@ static void ath12k_peer_assoc_h_vht(stru
+@@ -2196,11 +2214,12 @@ static void ath12k_peer_assoc_h_vht(stru
  	struct ieee80211_link_sta *link_sta;
  	struct cfg80211_chan_def def;
  	enum nl80211_band band;
@@ -180,7 +180,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
  
-@@ -2235,6 +2254,25 @@ static void ath12k_peer_assoc_h_vht(stru
+@@ -2253,6 +2272,25 @@ static void ath12k_peer_assoc_h_vht(stru
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160)
  		arg->bw_160 = true;
  
@@ -206,7 +206,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	/* Calculate peer NSS capability from VHT capabilities if STA
  	 * supports VHT.
  	 */
-@@ -2274,6 +2312,72 @@ static void ath12k_peer_assoc_h_vht(stru
+@@ -2292,6 +2330,72 @@ static void ath12k_peer_assoc_h_vht(stru
  	/* TODO: rxnss_override */
  }
  
@@ -279,7 +279,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  static void ath12k_peer_assoc_h_he(struct ath12k *ar,
  				   struct ath12k_link_vif *arvif,
  				   struct ath12k_link_sta *arsta,
-@@ -2284,18 +2388,28 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2302,18 +2406,28 @@ static void ath12k_peer_assoc_h_he(struc
  	const struct ieee80211_sta_he_cap *he_cap;
  	struct ieee80211_bss_conf *link_conf;
  	struct ieee80211_link_sta *link_sta;
@@ -310,7 +310,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  		return;
  	}
  
-@@ -2310,6 +2424,12 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2328,6 +2442,12 @@ static void ath12k_peer_assoc_h_he(struc
  	if (!he_cap->has_he)
  		return;
  
@@ -323,7 +323,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	arg->he_flag = true;
  
  	support_160 = !!(he_cap->he_cap_elem.phy_cap_info[0] &
-@@ -2415,25 +2535,47 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2433,25 +2553,47 @@ static void ath12k_peer_assoc_h_he(struc
  	if (he_cap->he_cap_elem.mac_cap_info[0] & IEEE80211_HE_MAC_CAP0_TWT_REQ)
  		arg->twt_requester = true;
  
@@ -373,7 +373,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  		fallthrough;
  
  	default:
-@@ -2441,11 +2583,36 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2459,11 +2601,36 @@ static void ath12k_peer_assoc_h_he(struc
  		arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_80] = v;
  
  		v = le16_to_cpu(he_cap->he_mcs_nss_supp.tx_mcs_80);
@@ -410,7 +410,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  }
  
  static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
-@@ -2781,6 +2948,7 @@ static void ath12k_peer_assoc_h_phymode(
+@@ -2799,6 +2966,7 @@ static void ath12k_peer_assoc_h_phymode(
  	enum nl80211_band band;
  	const u8 *ht_mcs_mask;
  	const u16 *vht_mcs_mask;
@@ -418,7 +418,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	enum wmi_phy_mode phymode = MODE_UNKNOWN;
  
  	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
-@@ -2794,6 +2962,7 @@ static void ath12k_peer_assoc_h_phymode(
+@@ -2812,6 +2980,7 @@ static void ath12k_peer_assoc_h_phymode(
  	band = def.chan->band;
  	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
  	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
@@ -426,7 +426,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  	link_sta = ath12k_mac_get_link_sta(arsta);
  	if (!link_sta) {
-@@ -2809,7 +2978,8 @@ static void ath12k_peer_assoc_h_phymode(
+@@ -2827,7 +2996,8 @@ static void ath12k_peer_assoc_h_phymode(
  				phymode = MODE_11BE_EHT40_2G;
  			else
  				phymode = MODE_11BE_EHT20_2G;
@@ -436,7 +436,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
  				phymode = MODE_11AX_HE80_2G;
  			else if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
-@@ -2839,7 +3009,8 @@ static void ath12k_peer_assoc_h_phymode(
+@@ -2857,7 +3027,8 @@ static void ath12k_peer_assoc_h_phymode(
  		/* Check EHT first */
  		if (link_sta->eht_cap.has_eht) {
  			phymode = ath12k_mac_get_phymode_eht(ar, link_sta);
@@ -446,7 +446,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  			phymode = ath12k_mac_get_phymode_he(ar, link_sta);
  		} else if (link_sta->vht_cap.vht_supported &&
  		    !ath12k_peer_assoc_h_vht_masked(vht_mcs_mask)) {
-@@ -3623,10 +3794,13 @@ static void ath12k_mac_init_arvif(struct
+@@ -3647,10 +3818,13 @@ static void ath12k_mac_init_arvif(struct
  
  	for (i = 0; i < ARRAY_SIZE(arvif->bitrate_mask.control); i++) {
  		arvif->bitrate_mask.control[i].legacy = 0xffffffff;
@@ -460,7 +460,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	}
  
  	/* Handle MLO related assignments */
-@@ -5282,6 +5456,20 @@ ath12k_mac_bitrate_mask_num_vht_rates(st
+@@ -5380,6 +5554,20 @@ ath12k_mac_bitrate_mask_num_vht_rates(st
  }
  
  static int
@@ -481,7 +481,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  ath12k_mac_set_peer_vht_fixed_rate(struct ath12k_link_vif *arvif,
  				   struct ath12k_link_sta *arsta,
  				   const struct cfg80211_bitrate_mask *mask,
-@@ -5327,6 +5515,60 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
+@@ -5425,6 +5613,60 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
  	return ret;
  }
  
@@ -542,7 +542,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  static int ath12k_mac_station_assoc(struct ath12k *ar,
  				    struct ath12k_link_vif *arvif,
  				    struct ath12k_link_sta *arsta,
-@@ -5339,7 +5581,7 @@ static int ath12k_mac_station_assoc(stru
+@@ -5437,7 +5679,7 @@ static int ath12k_mac_station_assoc(stru
  	struct cfg80211_chan_def def;
  	enum nl80211_band band;
  	struct cfg80211_bitrate_mask *mask;
@@ -551,7 +551,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	u8 link_id = arvif->link_id;
  
  	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
-@@ -5379,9 +5621,10 @@ static int ath12k_mac_station_assoc(stru
+@@ -5479,9 +5721,10 @@ static int ath12k_mac_station_assoc(stru
  	}
  
  	num_vht_rates = ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask);
@@ -564,7 +564,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	 * fixed param.
  	 * Note that all other rates and NSS will be disabled for this peer.
  	 */
-@@ -5397,8 +5640,9 @@ static int ath12k_mac_station_assoc(stru
+@@ -5497,8 +5740,9 @@ static int ath12k_mac_station_assoc(stru
  	spin_unlock_bh(&ar->data_lock);
  
  	if (link_sta->vht_cap.vht_supported && num_vht_rates == 1) {
@@ -576,7 +576,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  		if (ret)
  			return ret;
  	}
-@@ -5462,8 +5706,9 @@ static void ath12k_sta_rc_update_wk(stru
+@@ -5562,8 +5806,9 @@ static void ath12k_sta_rc_update_wk(stru
  	enum nl80211_band band;
  	const u8 *ht_mcs_mask;
  	const u16 *vht_mcs_mask;
@@ -588,7 +588,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	const struct cfg80211_bitrate_mask *mask;
  	enum wmi_phy_mode peer_phymode;
  	struct ath12k_link_sta *arsta;
-@@ -5483,6 +5728,7 @@ static void ath12k_sta_rc_update_wk(stru
+@@ -5583,6 +5828,7 @@ static void ath12k_sta_rc_update_wk(stru
  	band = def.chan->band;
  	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
  	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
@@ -596,7 +596,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  	spin_lock_bh(&ar->data_lock);
  
-@@ -5497,8 +5743,10 @@ static void ath12k_sta_rc_update_wk(stru
+@@ -5597,8 +5843,10 @@ static void ath12k_sta_rc_update_wk(stru
  	spin_unlock_bh(&ar->data_lock);
  
  	nss = max_t(u32, 1, nss);
@@ -609,7 +609,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  	struct ath12k_wmi_peer_assoc_arg *peer_arg __free(kfree) =
  					kzalloc(sizeof(*peer_arg), GFP_KERNEL);
-@@ -5581,6 +5829,8 @@ static void ath12k_sta_rc_update_wk(stru
+@@ -5681,6 +5929,8 @@ static void ath12k_sta_rc_update_wk(stru
  		mask = &arvif->bitrate_mask;
  		num_vht_rates = ath12k_mac_bitrate_mask_num_vht_rates(ar, band,
  								      mask);
@@ -618,7 +618,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  		/* Peer_assoc_prepare will reject vht rates in
  		 * bitrate_mask if its not available in range format and
-@@ -5603,11 +5853,24 @@ static void ath12k_sta_rc_update_wk(stru
+@@ -5703,11 +5953,24 @@ static void ath12k_sta_rc_update_wk(stru
  		if (link_sta->vht_cap.vht_supported && num_vht_rates == 1) {
  			ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
  							   band);
@@ -645,7 +645,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  			ath12k_peer_assoc_prepare(ar, arvif, arsta,
  						  peer_arg, true);
  
-@@ -11036,19 +11299,40 @@ ath12k_mac_has_single_legacy_rate(struct
+@@ -11146,19 +11409,40 @@ ath12k_mac_has_single_legacy_rate(struct
  	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask))
  		return false;
  
@@ -686,7 +686,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	int i;
  
  	/* No need to consider legacy here. Basic rates are always present
-@@ -11075,7 +11359,24 @@ ath12k_mac_bitrate_mask_get_single_nss(s
+@@ -11185,7 +11469,24 @@ ath12k_mac_bitrate_mask_get_single_nss(s
  			return false;
  	}
  
@@ -712,7 +712,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  		return false;
  
  	if (ht_nss_mask == 0)
-@@ -11122,54 +11423,182 @@ ath12k_mac_get_single_legacy_rate(struct
+@@ -11232,54 +11533,182 @@ ath12k_mac_get_single_legacy_rate(struct
  	return 0;
  }
  
@@ -914,7 +914,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	return 0;
  }
  
-@@ -11198,6 +11627,31 @@ ath12k_mac_vht_mcs_range_present(struct
+@@ -11308,6 +11737,31 @@ ath12k_mac_vht_mcs_range_present(struct
  	return true;
  }
  
@@ -946,7 +946,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  static void ath12k_mac_set_bitrate_mask_iter(void *data,
  					     struct ieee80211_sta *sta)
  {
-@@ -11206,7 +11660,10 @@ static void ath12k_mac_set_bitrate_mask_
+@@ -11316,7 +11770,10 @@ static void ath12k_mac_set_bitrate_mask_
  	struct ath12k_link_sta *arsta;
  	struct ath12k *ar = arvif->ar;
  
@@ -958,7 +958,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	if (!arsta || arsta->arvif != arvif)
  		return;
  
-@@ -11244,6 +11701,61 @@ static void ath12k_mac_disable_peer_fixe
+@@ -11354,6 +11811,61 @@ static void ath12k_mac_disable_peer_fixe
  			    arsta->addr, ret);
  }
  
@@ -1020,7 +1020,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  static int
  ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
  			       struct ieee80211_vif *vif,
-@@ -11256,13 +11768,17 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+@@ -11366,13 +11878,17 @@ ath12k_mac_op_set_bitrate_mask(struct ie
  	enum nl80211_band band;
  	const u8 *ht_mcs_mask;
  	const u16 *vht_mcs_mask;
@@ -1039,7 +1039,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  	lockdep_assert_wiphy(hw->wiphy);
  
-@@ -11277,14 +11793,18 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+@@ -11387,14 +11903,18 @@ ath12k_mac_op_set_bitrate_mask(struct ie
  	band = def.chan->band;
  	ht_mcs_mask = mask->control[band].ht_mcs;
  	vht_mcs_mask = mask->control[band].vht_mcs;
@@ -1059,7 +1059,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it
  	 * requires passing at least one of used basic rates along with them.
  	 * Fixed rate setting across different preambles(legacy, HT, VHT) is
-@@ -11301,18 +11821,31 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+@@ -11411,18 +11931,31 @@ ath12k_mac_op_set_bitrate_mask(struct ie
  				    arvif->vdev_id, ret);
  			goto out;
  		}
@@ -1095,7 +1095,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  
  		/* If multiple rates across different preambles are given
  		 * we can reconfigure this info with all peers using PEER_ASSOC
-@@ -11344,9 +11877,21 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+@@ -11454,9 +11987,21 @@ ath12k_mac_op_set_bitrate_mask(struct ie
  			 */
  			ath12k_warn(ar->ab,
  				    "Setting more than one MCS Value in bitrate mask not supported\n");
@@ -1118,7 +1118,7 @@ Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
  		ieee80211_iterate_stations_mtx(hw,
  					       ath12k_mac_disable_peer_fixed_rate,
  					       arvif);
-@@ -11357,9 +11902,10 @@ ath12k_mac_op_set_bitrate_mask(struct ie
+@@ -11467,9 +12012,10 @@ ath12k_mac_op_set_bitrate_mask(struct ie
  					       arvif);
  	}
  
diff --git a/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch b/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
index 55c9aa94f6..b9838745fd 100644
--- a/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-7-wifi-ath12k-clean-up-80P80-support.patch
@@ -142,7 +142,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  			[NL80211_CHAN_WIDTH_320] = MODE_11BE_EHT320,
  	},
  
-@@ -2556,17 +2556,6 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2574,17 +2574,6 @@ static void ath12k_peer_assoc_h_he(struc
  
  	switch (link_sta->bandwidth) {
  	case IEEE80211_STA_RX_BW_160:
@@ -160,7 +160,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		v = le16_to_cpu(he_cap->he_mcs_nss_supp.rx_mcs_160);
  		arg->peer_he_rx_mcs_set[WMI_HECAP_TXRX_MCS_NSS_IDX_160] = v;
  
-@@ -2853,16 +2842,11 @@ static enum wmi_phy_mode ath12k_mac_get_
+@@ -2871,16 +2860,11 @@ static enum wmi_phy_mode ath12k_mac_get_
  						    struct ieee80211_link_sta *link_sta)
  {
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
@@ -181,7 +181,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	}
  
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
-@@ -2884,11 +2868,8 @@ static enum wmi_phy_mode ath12k_mac_get_
+@@ -2902,11 +2886,8 @@ static enum wmi_phy_mode ath12k_mac_get_
  		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
  		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
  			return MODE_11AX_HE160;
@@ -195,7 +195,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	}
  
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
-@@ -2916,14 +2897,10 @@ static enum wmi_phy_mode ath12k_mac_get_
+@@ -2934,14 +2915,10 @@ static enum wmi_phy_mode ath12k_mac_get_
  		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
  			return MODE_11BE_EHT160;
  
@@ -211,7 +211,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	}
  
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
-@@ -7630,8 +7607,6 @@ static void ath12k_mac_set_hemcsmap(stru
+@@ -7731,8 +7708,6 @@ static void ath12k_mac_set_hemcsmap(stru
  	mcs_nss->tx_mcs_80 = cpu_to_le16(txmcs_map & 0xffff);
  	mcs_nss->rx_mcs_160 = cpu_to_le16(rxmcs_map & 0xffff);
  	mcs_nss->tx_mcs_160 = cpu_to_le16(txmcs_map & 0xffff);
@@ -220,7 +220,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  }
  
  static void ath12k_mac_copy_he_cap(struct ath12k *ar,
-@@ -7653,6 +7628,7 @@ static void ath12k_mac_copy_he_cap(struc
+@@ -7754,6 +7729,7 @@ static void ath12k_mac_copy_he_cap(struc
  		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G |
  		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G |
  		IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G;
@@ -228,7 +228,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	he_cap_elem->phy_cap_info[0] &=
  		~IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G;
  	he_cap_elem->phy_cap_info[5] &=
-@@ -11309,10 +11285,6 @@ static __le16
+@@ -11419,10 +11395,6 @@ static __le16
  ath12k_mac_get_tx_mcs_map(const struct ieee80211_sta_he_cap *he_cap)
  {
  	if (he_cap->he_cap_elem.phy_cap_info[0] &
@@ -241,7 +241,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
 --- a/drivers/net/wireless/ath/ath12k/wmi.c
 +++ b/drivers/net/wireless/ath/ath12k/wmi.c
-@@ -1066,8 +1066,6 @@ static void ath12k_wmi_put_wmi_channel(s
+@@ -1114,8 +1114,6 @@ static void ath12k_wmi_put_wmi_channel(s
  			chan->band_center_freq1 = cpu_to_le32(center_freq1 - 40);
  
  		chan->band_center_freq2 = cpu_to_le32(center_freq1);
@@ -252,7 +252,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	}
 --- a/drivers/net/wireless/ath/ath12k/wmi.h
 +++ b/drivers/net/wireless/ath/ath12k/wmi.h
-@@ -3798,7 +3798,6 @@ struct wmi_vdev_install_key_arg {
+@@ -3799,7 +3799,6 @@ struct wmi_vdev_install_key_arg {
  #define WMI_HOST_MAX_HE_RATE_SET		3
  #define WMI_HECAP_TXRX_MCS_NSS_IDX_80		0
  #define WMI_HECAP_TXRX_MCS_NSS_IDX_160		1
diff --git a/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch b/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
index aeaeefeeb0..b5804eec38 100644
--- a/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-8-wifi-ath12k-add-support-for-160-MHz-bandwidth.patch
@@ -139,7 +139,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/core.h
 +++ b/drivers/net/wireless/ath/ath12k/core.h
-@@ -879,6 +879,8 @@ struct ath12k_pdev_cap {
+@@ -886,6 +886,8 @@ struct ath12k_pdev_cap {
  	struct ath12k_band_cap band[NUM_NL80211_BANDS];
  	u32 eml_cap;
  	u32 mld_cap;
@@ -150,7 +150,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  struct mlo_timestamp {
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -2185,6 +2185,34 @@ ath12k_peer_assoc_h_vht_limit(u16 tx_mcs
+@@ -2203,6 +2203,34 @@ ath12k_peer_assoc_h_vht_limit(u16 tx_mcs
  	return tx_mcs_set;
  }
  
@@ -185,7 +185,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  static void ath12k_peer_assoc_h_vht(struct ath12k *ar,
  				    struct ath12k_link_vif *arvif,
  				    struct ath12k_link_sta *arsta,
-@@ -2202,6 +2230,7 @@ static void ath12k_peer_assoc_h_vht(stru
+@@ -2220,6 +2248,7 @@ static void ath12k_peer_assoc_h_vht(stru
  	u8 max_nss, vht_mcs;
  	int i, vht_nss, nss_idx;
  	bool user_rate_valid = true;
@@ -193,7 +193,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	lockdep_assert_wiphy(ath12k_ar_to_hw(ar)->wiphy);
  
-@@ -2306,10 +2335,24 @@ static void ath12k_peer_assoc_h_vht(stru
+@@ -2324,10 +2353,24 @@ static void ath12k_peer_assoc_h_vht(stru
  	/* TODO:  Check */
  	arg->tx_max_mcs_nss = 0xFF;
  
@@ -221,7 +221,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  }
  
  static int ath12k_mac_get_max_he_mcs_map(u16 mcs_map, int nss)
-@@ -2402,6 +2445,7 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2420,6 +2463,7 @@ static void ath12k_peer_assoc_h_he(struc
  	u16 he_tx_mcs = 0, v = 0;
  	int he_nss, nss_idx;
  	bool user_rate_valid = true;
@@ -229,7 +229,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	if (WARN_ON(ath12k_mac_vif_link_chan(vif, link_id, &def)))
  		return;
-@@ -2599,9 +2643,25 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2617,9 +2661,25 @@ static void ath12k_peer_assoc_h_he(struc
  	max_nss = min(max_nss, ar->num_tx_chains);
  	arg->peer_nss = min(link_sta->rx_nss, max_nss);
  
@@ -257,7 +257,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  }
  
  static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
-@@ -2842,10 +2902,13 @@ static enum wmi_phy_mode ath12k_mac_get_
+@@ -2860,10 +2920,13 @@ static enum wmi_phy_mode ath12k_mac_get_
  						    struct ieee80211_link_sta *link_sta)
  {
  	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
@@ -273,7 +273,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		return MODE_11AC_VHT160;
  	}
  
-@@ -7379,10 +7442,8 @@ ath12k_create_vht_cap(struct ath12k *ar,
+@@ -7480,10 +7543,8 @@ ath12k_create_vht_cap(struct ath12k *ar,
  
  	ath12k_set_vht_txbf_cap(ar, &vht_cap.cap);
  
@@ -286,7 +286,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  
  	rxmcs_map = 0;
  	txmcs_map = 0;
-@@ -12654,7 +12715,8 @@ ath12k_mac_setup_radio_iface_comb(struct
+@@ -12764,7 +12825,8 @@ ath12k_mac_setup_radio_iface_comb(struct
  		comb[0].radar_detect_widths = BIT(NL80211_CHAN_WIDTH_20_NOHT) |
  						BIT(NL80211_CHAN_WIDTH_20) |
  						BIT(NL80211_CHAN_WIDTH_40) |
@@ -296,7 +296,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	}
  
  	return 0;
-@@ -13031,6 +13093,9 @@ static int ath12k_mac_hw_register(struct
+@@ -13142,6 +13204,9 @@ static int ath12k_mac_hw_register(struct
  	ieee80211_hw_set(hw, REPORTS_LOW_ACK);
  	ieee80211_hw_set(hw, NO_VIRTUAL_MONITOR);
  
@@ -330,7 +330,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	} else {
  		return -EINVAL;
  	}
-@@ -1059,7 +1063,8 @@ static void ath12k_wmi_put_wmi_channel(s
+@@ -1107,7 +1111,8 @@ static void ath12k_wmi_put_wmi_channel(s
  
  		chan->band_center_freq2 = cpu_to_le32(center_freq1);
  
diff --git a/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch b/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
index fd618f784f..f1907b0324 100644
--- a/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
+++ b/package/kernel/mac80211/patches/ath12k/104-9-wifi-ath12k-add-extended-NSS-bandwidth-support-for-160-MHz.patch
@@ -132,7 +132,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
 
 --- a/drivers/net/wireless/ath/ath12k/mac.c
 +++ b/drivers/net/wireless/ath/ath12k/mac.c
-@@ -2644,8 +2644,10 @@ static void ath12k_peer_assoc_h_he(struc
+@@ -2662,8 +2662,10 @@ static void ath12k_peer_assoc_h_he(struc
  	arg->peer_nss = min(link_sta->rx_nss, max_nss);
  
  	if (arg->peer_phymode == MODE_11AX_HE160) {
@@ -144,7 +144,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
  
  		if (!rx_nss) {
-@@ -7465,6 +7467,12 @@ ath12k_create_vht_cap(struct ath12k *ar,
+@@ -7566,6 +7568,12 @@ ath12k_create_vht_cap(struct ath12k *ar,
  	vht_cap.vht_mcs.rx_mcs_map = cpu_to_le16(rxmcs_map);
  	vht_cap.vht_mcs.tx_mcs_map = cpu_to_le16(txmcs_map);
  
@@ -157,7 +157,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	return vht_cap;
  }
  
-@@ -7645,11 +7653,12 @@ static void ath12k_mac_set_hemcsmap(stru
+@@ -7746,11 +7754,12 @@ static void ath12k_mac_set_hemcsmap(stru
  				    struct ieee80211_sta_he_cap *he_cap)
  {
  	struct ieee80211_he_mcs_nss_supp *mcs_nss = &he_cap->he_mcs_nss_supp;
@@ -173,7 +173,7 @@ Acked-by: Jeff Johnson <quic_jjohnson@quicinc.com>
  	for (i = 0; i < 8; i++) {
  		if (i < ar->num_tx_chains &&
  		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
-@@ -7662,12 +7671,24 @@ static void ath12k_mac_set_hemcsmap(stru
+@@ -7763,12 +7772,24 @@ static void ath12k_mac_set_hemcsmap(stru
  			rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
  		else
  			rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
diff --git a/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch b/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
index 9063bba847..95e47d08a8 100644
--- a/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
+++ b/package/kernel/mac80211/patches/brcm/870-02-rpi-6.12-brcmfmac-Prefer-a-ccode-from-OTP-over-nvram-file.patch
@@ -22,7 +22,7 @@ Signed-off-by: Phil Elwell <phil@raspberrypi.com>
  #include <net/cfg80211.h>
  #include <net/netlink.h>
  #include <uapi/linux/if_arp.h>
-@@ -8223,31 +8224,45 @@ static void brcmf_cfg80211_reg_notifier(
+@@ -8231,31 +8232,45 @@ static void brcmf_cfg80211_reg_notifier(
  	struct brcmf_if *ifp = brcmf_get_ifp(cfg->pub, 0);
  	struct brcmf_pub *drvr = cfg->pub;
  	struct brcmf_fil_country_le ccreq;
diff --git a/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch b/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
index 8bd63cd2d5..79d354f1ae 100644
--- a/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
+++ b/package/kernel/mac80211/patches/brcm/871-brcmfmac-disable-dump_survey-on-bcm2835.patch
@@ -9,7 +9,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
 
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
-@@ -8002,6 +8002,7 @@ static s32 brcmf_translate_country_code(
+@@ -8010,6 +8010,7 @@ static s32 brcmf_translate_country_code(
  	return 0;
  }
  
@@ -17,7 +17,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
  static int
  brcmf_parse_dump_obss(char *buf, struct brcmf_dump_survey *survey)
  {
-@@ -8224,6 +8225,7 @@ exit:
+@@ -8232,6 +8233,7 @@ exit:
  		brcmf_set_mpc(ifp, 1);
  	return err;
  }
@@ -25,7 +25,7 @@ Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
  
  static void brcmf_cfg80211_reg_notifier(struct wiphy *wiphy,
  					struct regulatory_request *req)
-@@ -8390,8 +8392,10 @@ struct brcmf_cfg80211_info *brcmf_cfg802
+@@ -8398,8 +8400,10 @@ struct brcmf_cfg80211_info *brcmf_cfg802
  	if (brcmf_feat_is_enabled(ifp, BRCMF_FEAT_WOWL_GTK))
  		ops->set_rekey_data = brcmf_cfg80211_set_rekey_data;
  #endif
diff --git a/package/kernel/mac80211/patches/mwl/700-mwl8k-missing-pci-id-for-WNR854T.patch b/package/kernel/mac80211/patches/mwl/700-mwl8k-missing-pci-id-for-WNR854T.patch
index cfb7dcf738..7baab80d24 100644
--- a/package/kernel/mac80211/patches/mwl/700-mwl8k-missing-pci-id-for-WNR854T.patch
+++ b/package/kernel/mac80211/patches/mwl/700-mwl8k-missing-pci-id-for-WNR854T.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/marvell/mwl8k.c
 +++ b/drivers/net/wireless/marvell/mwl8k.c
-@@ -5712,6 +5712,7 @@ MODULE_FIRMWARE("mwl8k/fmimage_8366.fw")
+@@ -5716,6 +5716,7 @@ MODULE_FIRMWARE("mwl8k/fmimage_8366.fw")
  MODULE_FIRMWARE(MWL8K_8366_AP_FW(MWL8K_8366_AP_FW_API));
  
  static const struct pci_device_id mwl8k_pci_id_table[] = {
diff --git a/package/kernel/mac80211/patches/mwl/801-libertas-configure-sysfs-links.patch b/package/kernel/mac80211/patches/mwl/801-libertas-configure-sysfs-links.patch
index 4a4a9b293d..bc24fdc744 100644
--- a/package/kernel/mac80211/patches/mwl/801-libertas-configure-sysfs-links.patch
+++ b/package/kernel/mac80211/patches/mwl/801-libertas-configure-sysfs-links.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/marvell/libertas/cfg.c
 +++ b/drivers/net/wireless/marvell/libertas/cfg.c
-@@ -2102,6 +2102,8 @@ struct wireless_dev *lbs_cfg_alloc(struc
+@@ -2105,6 +2105,8 @@ struct wireless_dev *lbs_cfg_alloc(struc
  		goto err_wiphy_new;
  	}
  
diff --git a/package/kernel/mac80211/patches/mwl/802-libertas-set-wireless-macaddr.patch b/package/kernel/mac80211/patches/mwl/802-libertas-set-wireless-macaddr.patch
index 97ddd66b32..9aa4d05473 100644
--- a/package/kernel/mac80211/patches/mwl/802-libertas-set-wireless-macaddr.patch
+++ b/package/kernel/mac80211/patches/mwl/802-libertas-set-wireless-macaddr.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/marvell/libertas/cfg.c
 +++ b/drivers/net/wireless/marvell/libertas/cfg.c
-@@ -2179,6 +2179,8 @@ int lbs_cfg_register(struct lbs_private
+@@ -2182,6 +2182,8 @@ int lbs_cfg_register(struct lbs_private
  	wdev->wiphy->n_cipher_suites = ARRAY_SIZE(cipher_suites);
  	wdev->wiphy->reg_notifier = lbs_reg_notifier;
  
diff --git a/package/kernel/mac80211/patches/mwl/940-mwl8k_init_devices_synchronously.patch b/package/kernel/mac80211/patches/mwl/940-mwl8k_init_devices_synchronously.patch
index d09cfac448..d021b1e40b 100644
--- a/package/kernel/mac80211/patches/mwl/940-mwl8k_init_devices_synchronously.patch
+++ b/package/kernel/mac80211/patches/mwl/940-mwl8k_init_devices_synchronously.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/wireless/marvell/mwl8k.c
 +++ b/drivers/net/wireless/marvell/mwl8k.c
-@@ -6298,6 +6298,8 @@ static int mwl8k_probe(struct pci_dev *p
+@@ -6302,6 +6302,8 @@ static int mwl8k_probe(struct pci_dev *p
  
  	priv->running_bsses = 0;
  
@@ -9,7 +9,7 @@
  	return rc;
  
  err_stop_firmware:
-@@ -6331,8 +6333,6 @@ static void mwl8k_remove(struct pci_dev
+@@ -6335,8 +6337,6 @@ static void mwl8k_remove(struct pci_dev
  		return;
  	priv = hw->priv;
  
diff --git a/package/kernel/mac80211/patches/rtl/0001-wifi-rtw88-pci-add-PCI-Express-error-handling.patch b/package/kernel/mac80211/patches/rtl/0001-wifi-rtw88-pci-add-PCI-Express-error-handling.patch
new file mode 100644
index 0000000000..cf4a64ebb3
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0001-wifi-rtw88-pci-add-PCI-Express-error-handling.patch
@@ -0,0 +1,144 @@
+From cdb82c80b9349ed1d9ce6b49856128e04f4effc9 Mon Sep 17 00:00:00 2001
+From: Chin-Yen Lee <timlee@realtek.com>
+Date: Fri, 23 May 2025 14:27:10 +0800
+Subject: [PATCH] wifi: rtw88: pci: add PCI Express error handling
+
+Sometimes PCIe Advanced Error Reporting(AER), like bad TLP or
+Data link protocol error, happens due to unstable pci signal or
+no response from PCI host.
+
+  pcieport 0000:00:00.0: AER: Multiple Corrected error message received from 0000:00:00.0
+  pcieport 0000:00:00.0: AER: PCIe Bus Error: severity=Corrected, type=Physical Layer, (Receiver ID)
+  pcieport 0000:00:00.0: AER:   device [14c3:6786] error status/mask=000000c1/00006000
+  pcieport 0000:00:00.0: AER:    [ 0] RxErr                  (First)
+  pcieport 0000:00:00.0: AER:    [ 6] BadTLP
+  pcieport 0000:00:00.0: AER:    [ 7] BadDLLP
+  pcieport 0000:00:00.0: AER: Corrected error message received from 0000:00:00.0
+  pcieport 0000:00:00.0: AER: found no error details for 0000:00:00.0
+  pcieport 0000:00:00.0: AER: Multiple Corrected error message received from 0000:00:00.0
+  pcieport 0000:00:00.0: AER: found no error details for 0000:00:00.0
+  pcieport 0000:00:00.0: AER: Multiple Corrected error message received from 0000:00:00.0
+  pcieport 0000:00:00.0: AER: found no error details for 0000:00:00.0
+
+Setup callback function to call SER function to reset driver to recover
+from these states
+
+Signed-off-by: Chin-Yen Lee <timlee@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250523062711.27213-2-pkshih@realtek.com
+---
+ drivers/net/wireless/realtek/rtw88/main.c     |  1 +
+ drivers/net/wireless/realtek/rtw88/pci.c      | 37 +++++++++++++++++++
+ drivers/net/wireless/realtek/rtw88/pci.h      |  1 +
+ .../net/wireless/realtek/rtw88/rtw8723de.c    |  1 +
+ .../net/wireless/realtek/rtw88/rtw8821ce.c    |  1 +
+ .../net/wireless/realtek/rtw88/rtw8822be.c    |  1 +
+ .../net/wireless/realtek/rtw88/rtw8822ce.c    |  1 +
+ 7 files changed, 43 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -636,6 +636,7 @@ void rtw_fw_recovery(struct rtw_dev *rtw
+ 	if (!test_bit(RTW_FLAG_RESTARTING, rtwdev->flags))
+ 		ieee80211_queue_work(rtwdev->hw, &rtwdev->fw_recovery_work);
+ }
++EXPORT_SYMBOL(rtw_fw_recovery);
+ 
+ static void __fw_recovery_work(struct rtw_dev *rtwdev)
+ {
+--- a/drivers/net/wireless/realtek/rtw88/pci.c
++++ b/drivers/net/wireless/realtek/rtw88/pci.c
+@@ -1707,6 +1707,43 @@ static void rtw_pci_napi_deinit(struct r
+ 	free_netdev(rtwpci->netdev);
+ }
+ 
++static pci_ers_result_t rtw_pci_io_err_detected(struct pci_dev *pdev,
++						pci_channel_state_t state)
++{
++	struct net_device *netdev = pci_get_drvdata(pdev);
++
++	netif_device_detach(netdev);
++
++	return PCI_ERS_RESULT_NEED_RESET;
++}
++
++static pci_ers_result_t rtw_pci_io_slot_reset(struct pci_dev *pdev)
++{
++	struct ieee80211_hw *hw = pci_get_drvdata(pdev);
++	struct rtw_dev *rtwdev = hw->priv;
++
++	rtw_fw_recovery(rtwdev);
++
++	return PCI_ERS_RESULT_RECOVERED;
++}
++
++static void rtw_pci_io_resume(struct pci_dev *pdev)
++{
++	struct net_device *netdev = pci_get_drvdata(pdev);
++
++	/* ack any pending wake events, disable PME */
++	pci_enable_wake(pdev, PCI_D0, 0);
++
++	netif_device_attach(netdev);
++}
++
++const struct pci_error_handlers rtw_pci_err_handler = {
++	.error_detected = rtw_pci_io_err_detected,
++	.slot_reset = rtw_pci_io_slot_reset,
++	.resume = rtw_pci_io_resume,
++};
++EXPORT_SYMBOL(rtw_pci_err_handler);
++
+ int rtw_pci_probe(struct pci_dev *pdev,
+ 		  const struct pci_device_id *id)
+ {
+--- a/drivers/net/wireless/realtek/rtw88/pci.h
++++ b/drivers/net/wireless/realtek/rtw88/pci.h
+@@ -231,6 +231,7 @@ struct rtw_pci {
+ };
+ 
+ extern const struct dev_pm_ops rtw_pm_ops;
++extern const struct pci_error_handlers rtw_pci_err_handler;
+ 
+ int rtw_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id);
+ void rtw_pci_remove(struct pci_dev *pdev);
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723de.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723de.c
+@@ -23,6 +23,7 @@ static struct pci_driver rtw_8723de_driv
+ 	.remove = rtw_pci_remove,
+ 	.driver.pm = &rtw_pm_ops,
+ 	.shutdown = rtw_pci_shutdown,
++	.err_handler  = &rtw_pci_err_handler,
+ };
+ module_pci_driver(rtw_8723de_driver);
+ 
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821ce.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821ce.c
+@@ -27,6 +27,7 @@ static struct pci_driver rtw_8821ce_driv
+ 	.remove = rtw_pci_remove,
+ 	.driver.pm = &rtw_pm_ops,
+ 	.shutdown = rtw_pci_shutdown,
++	.err_handler  = &rtw_pci_err_handler,
+ };
+ module_pci_driver(rtw_8821ce_driver);
+ 
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822be.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822be.c
+@@ -23,6 +23,7 @@ static struct pci_driver rtw_8822be_driv
+ 	.remove = rtw_pci_remove,
+ 	.driver.pm = &rtw_pm_ops,
+ 	.shutdown = rtw_pci_shutdown,
++	.err_handler  = &rtw_pci_err_handler,
+ };
+ module_pci_driver(rtw_8822be_driver);
+ 
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822ce.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822ce.c
+@@ -27,6 +27,7 @@ static struct pci_driver rtw_8822ce_driv
+ 	.remove = rtw_pci_remove,
+ 	.driver.pm = &rtw_pm_ops,
+ 	.shutdown = rtw_pci_shutdown,
++	.err_handler  = &rtw_pci_err_handler,
+ };
+ module_pci_driver(rtw_8822ce_driver);
+ 
diff --git a/package/kernel/mac80211/patches/rtl/0002-wifi-rtw88-Rename-the-RTW_WCPU_11-AC-N-enums.patch b/package/kernel/mac80211/patches/rtl/0002-wifi-rtw88-Rename-the-RTW_WCPU_11-AC-N-enums.patch
new file mode 100644
index 0000000000..3950f0c5a8
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0002-wifi-rtw88-Rename-the-RTW_WCPU_11-AC-N-enums.patch
@@ -0,0 +1,399 @@
+From 57d6be36cf422e259955d72d994fd1fb668104f8 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sat, 7 Jun 2025 20:59:53 +0300
+Subject: [PATCH] wifi: rtw88: Rename the RTW_WCPU_11{AC,N} enums
+
+The RTW_WCPU_11AC and RTW_WCPU_11N enums are used to identify two
+types of microcontrollers used in Realtek chips, but these names are
+misleading. The "11AC" type was also used in 11n devices (e.g.
+RTL8733BU, not supported by rtw88), and the "11N" type was also used
+in 11ac devices (RTL8821AU, RTL8812AU).
+
+Rename RTW_WCPU_11AC to RTW_WCPU_3081 and RTW_WCPU_11N to RTW_WCPU_8051.
+(8051 is well known. It's less clear what 3081 is, but the out of tree
+drivers use this name.)
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/bfb1099c-db52-4b25-b111-17ab712e9404@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/fw.c       |  8 +++----
+ drivers/net/wireless/realtek/rtw88/mac.c      | 22 +++++++++----------
+ drivers/net/wireless/realtek/rtw88/main.c     |  2 +-
+ drivers/net/wireless/realtek/rtw88/main.h     | 12 +++++-----
+ drivers/net/wireless/realtek/rtw88/pci.c      | 12 +++++-----
+ drivers/net/wireless/realtek/rtw88/rtw8703b.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8723d.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8812a.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8814a.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821a.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c |  2 +-
+ drivers/net/wireless/realtek/rtw88/sdio.c     |  8 +++----
+ 14 files changed, 40 insertions(+), 40 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/fw.c
++++ b/drivers/net/wireless/realtek/rtw88/fw.c
+@@ -521,7 +521,7 @@ rtw_fw_send_general_info(struct rtw_dev
+ 	u8 h2c_pkt[H2C_PKT_SIZE] = {0};
+ 	u16 total_size = H2C_PKT_HDR_SIZE + 4;
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return;
+ 
+ 	rtw_h2c_pkt_set_header(h2c_pkt, H2C_PKT_GENERAL_INFO);
+@@ -544,7 +544,7 @@ rtw_fw_send_phydm_info(struct rtw_dev *r
+ 	u16 total_size = H2C_PKT_HDR_SIZE + 8;
+ 	u8 fw_rf_type = 0;
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return;
+ 
+ 	if (hal->rf_type == RF_1T1R)
+@@ -1480,7 +1480,7 @@ int rtw_fw_write_data_rsvd_page(struct r
+ 
+ 	bckp[2] = rtw_read8(rtwdev, REG_BCN_CTRL);
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev)) {
++	if (rtw_chip_wcpu_8051(rtwdev)) {
+ 		rtw_write32_set(rtwdev, REG_DWBCN0_CTRL, BIT_BCN_VALID);
+ 	} else {
+ 		pg_addr &= BIT_MASK_BCN_HEAD_1_V1;
+@@ -1509,7 +1509,7 @@ int rtw_fw_write_data_rsvd_page(struct r
+ 		goto restore;
+ 	}
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev)) {
++	if (rtw_chip_wcpu_8051(rtwdev)) {
+ 		bcn_valid_addr = REG_DWBCN0_CTRL;
+ 		bcn_valid_mask = BIT_BCN_VALID;
+ 	} else {
+--- a/drivers/net/wireless/realtek/rtw88/mac.c
++++ b/drivers/net/wireless/realtek/rtw88/mac.c
+@@ -41,7 +41,7 @@ void rtw_set_channel_mac(struct rtw_dev
+ 	}
+ 	rtw_write32(rtwdev, REG_WMAC_TRXPTCL_CTL, value32);
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return;
+ 
+ 	value32 = rtw_read32(rtwdev, REG_AFE_CTRL1) & ~(BIT_MAC_CLK_SEL);
+@@ -67,7 +67,7 @@ static int rtw_mac_pre_system_cfg(struct
+ 
+ 	rtw_write8(rtwdev, REG_RSV_CTRL, 0);
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev)) {
++	if (rtw_chip_wcpu_8051(rtwdev)) {
+ 		if (rtw_read32(rtwdev, REG_SYS_CFG1) & BIT_LDO)
+ 			rtw_write8(rtwdev, REG_LDO_SWR_CTRL, LDO_SEL);
+ 		else
+@@ -278,7 +278,7 @@ static int rtw_mac_power_switch(struct r
+ 	bool cur_pwr;
+ 	int ret;
+ 
+-	if (rtw_chip_wcpu_11ac(rtwdev)) {
++	if (rtw_chip_wcpu_3081(rtwdev)) {
+ 		rpwm = rtw_read8(rtwdev, rtwdev->hci.rpwm_addr);
+ 
+ 		/* Check FW still exist or not */
+@@ -369,7 +369,7 @@ static int __rtw_mac_init_system_cfg_leg
+ 
+ static int rtw_mac_init_system_cfg(struct rtw_dev *rtwdev)
+ {
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return __rtw_mac_init_system_cfg_legacy(rtwdev);
+ 
+ 	return __rtw_mac_init_system_cfg(rtwdev);
+@@ -981,7 +981,7 @@ out:
+ static
+ int _rtw_download_firmware(struct rtw_dev *rtwdev, struct rtw_fw_state *fw)
+ {
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return __rtw_download_firmware_legacy(rtwdev, fw);
+ 
+ 	return __rtw_download_firmware(rtwdev, fw);
+@@ -1122,7 +1122,7 @@ static int txdma_queue_mapping(struct rt
+ 
+ 	rtw_write8(rtwdev, REG_CR, 0);
+ 	rtw_write8(rtwdev, REG_CR, MAC_TRX_ENABLE);
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		rtw_write32(rtwdev, REG_H2CQ_CSR, BIT_H2CQ_FULL);
+ 
+ 	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_SDIO) {
+@@ -1145,7 +1145,7 @@ int rtw_set_trx_fifo_info(struct rtw_dev
+ 	/* config rsvd page num */
+ 	fifo->rsvd_drv_pg_num = chip->rsvd_drv_pg_num;
+ 	fifo->txff_pg_num = chip->txff_size / chip->page_size;
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		fifo->rsvd_pg_num = fifo->rsvd_drv_pg_num;
+ 	else
+ 		fifo->rsvd_pg_num = fifo->rsvd_drv_pg_num +
+@@ -1163,7 +1163,7 @@ int rtw_set_trx_fifo_info(struct rtw_dev
+ 	fifo->rsvd_boundary = fifo->txff_pg_num - fifo->rsvd_pg_num;
+ 
+ 	cur_pg_addr = fifo->txff_pg_num;
+-	if (rtw_chip_wcpu_11ac(rtwdev)) {
++	if (rtw_chip_wcpu_3081(rtwdev)) {
+ 		cur_pg_addr -= csi_buf_pg_num;
+ 		fifo->rsvd_csibuf_addr = cur_pg_addr;
+ 		cur_pg_addr -= RSVD_PG_FW_TXBUF_NUM;
+@@ -1292,7 +1292,7 @@ static int priority_queue_cfg(struct rtw
+ 
+ 	pubq_num = fifo->acq_pg_num - pg_tbl->hq_num - pg_tbl->lq_num -
+ 		   pg_tbl->nq_num - pg_tbl->exq_num - pg_tbl->gapq_num;
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return __priority_queue_cfg_legacy(rtwdev, pg_tbl, pubq_num);
+ 	else
+ 		return __priority_queue_cfg(rtwdev, pg_tbl, pubq_num);
+@@ -1308,7 +1308,7 @@ static int init_h2c(struct rtw_dev *rtwd
+ 	u32 h2cq_free;
+ 	u32 wp, rp;
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		return 0;
+ 
+ 	h2cq_addr = fifo->rsvd_h2cq_addr << TX_PAGE_SIZE_SHIFT;
+@@ -1375,7 +1375,7 @@ static int rtw_drv_info_cfg(struct rtw_d
+ 	u8 value8;
+ 
+ 	rtw_write8(rtwdev, REG_RX_DRVINFO_SZ, PHY_STATUS_SIZE);
+-	if (rtw_chip_wcpu_11ac(rtwdev)) {
++	if (rtw_chip_wcpu_3081(rtwdev)) {
+ 		value8 = rtw_read8(rtwdev, REG_TRXFF_BNDY + 1);
+ 		value8 &= 0xF0;
+ 		/* For rxdesc len = 0 issue */
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -1766,7 +1766,7 @@ static void __update_firmware_info_legac
+ static void update_firmware_info(struct rtw_dev *rtwdev,
+ 				 struct rtw_fw_state *fw)
+ {
+-	if (rtw_chip_wcpu_11n(rtwdev))
++	if (rtw_chip_wcpu_8051(rtwdev))
+ 		__update_firmware_info_legacy(rtwdev, fw);
+ 	else
+ 		__update_firmware_info(rtwdev, fw);
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -1173,8 +1173,8 @@ struct rtw_pwr_track_tbl {
+ };
+ 
+ enum rtw_wlan_cpu {
+-	RTW_WCPU_11AC,
+-	RTW_WCPU_11N,
++	RTW_WCPU_3081,
++	RTW_WCPU_8051,
+ };
+ 
+ enum rtw_fw_fifo_sel {
+@@ -2166,14 +2166,14 @@ static inline void rtw_chip_efuse_grant_
+ 		rtwdev->chip->ops->efuse_grant(rtwdev, false);
+ }
+ 
+-static inline bool rtw_chip_wcpu_11n(struct rtw_dev *rtwdev)
++static inline bool rtw_chip_wcpu_8051(struct rtw_dev *rtwdev)
+ {
+-	return rtwdev->chip->wlan_cpu == RTW_WCPU_11N;
++	return rtwdev->chip->wlan_cpu == RTW_WCPU_8051;
+ }
+ 
+-static inline bool rtw_chip_wcpu_11ac(struct rtw_dev *rtwdev)
++static inline bool rtw_chip_wcpu_3081(struct rtw_dev *rtwdev)
+ {
+-	return rtwdev->chip->wlan_cpu == RTW_WCPU_11AC;
++	return rtwdev->chip->wlan_cpu == RTW_WCPU_3081;
+ }
+ 
+ static inline bool rtw_chip_has_rx_ldpc(struct rtw_dev *rtwdev)
+--- a/drivers/net/wireless/realtek/rtw88/pci.c
++++ b/drivers/net/wireless/realtek/rtw88/pci.c
+@@ -405,7 +405,7 @@ static void rtw_pci_reset_buf_desc(struc
+ 	dma = rtwpci->tx_rings[RTW_TX_QUEUE_BCN].r.dma;
+ 	rtw_write32(rtwdev, RTK_PCI_TXBD_DESA_BCNQ, dma);
+ 
+-	if (!rtw_chip_wcpu_11n(rtwdev)) {
++	if (!rtw_chip_wcpu_8051(rtwdev)) {
+ 		len = rtwpci->tx_rings[RTW_TX_QUEUE_H2C].r.len;
+ 		dma = rtwpci->tx_rings[RTW_TX_QUEUE_H2C].r.dma;
+ 		rtwpci->tx_rings[RTW_TX_QUEUE_H2C].r.rp = 0;
+@@ -467,7 +467,7 @@ static void rtw_pci_reset_buf_desc(struc
+ 	rtw_write32(rtwdev, RTK_PCI_TXBD_RWPTR_CLR, 0xffffffff);
+ 
+ 	/* reset H2C Queue index in a single write */
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		rtw_write32_set(rtwdev, RTK_PCI_TXBD_H2CQ_CSR,
+ 				BIT_CLR_H2CQ_HOST_IDX | BIT_CLR_H2CQ_HW_IDX);
+ }
+@@ -487,7 +487,7 @@ static void rtw_pci_enable_interrupt(str
+ 
+ 	rtw_write32(rtwdev, RTK_PCI_HIMR0, rtwpci->irq_mask[0] & ~imr0_unmask);
+ 	rtw_write32(rtwdev, RTK_PCI_HIMR1, rtwpci->irq_mask[1]);
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		rtw_write32(rtwdev, RTK_PCI_HIMR3, rtwpci->irq_mask[3]);
+ 
+ 	rtwpci->irq_enabled = true;
+@@ -507,7 +507,7 @@ static void rtw_pci_disable_interrupt(st
+ 
+ 	rtw_write32(rtwdev, RTK_PCI_HIMR0, 0);
+ 	rtw_write32(rtwdev, RTK_PCI_HIMR1, 0);
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		rtw_write32(rtwdev, RTK_PCI_HIMR3, 0);
+ 
+ 	rtwpci->irq_enabled = false;
+@@ -1125,7 +1125,7 @@ static void rtw_pci_irq_recognized(struc
+ 
+ 	irq_status[0] = rtw_read32(rtwdev, RTK_PCI_HISR0);
+ 	irq_status[1] = rtw_read32(rtwdev, RTK_PCI_HISR1);
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		irq_status[3] = rtw_read32(rtwdev, RTK_PCI_HISR3);
+ 	else
+ 		irq_status[3] = 0;
+@@ -1134,7 +1134,7 @@ static void rtw_pci_irq_recognized(struc
+ 	irq_status[3] &= rtwpci->irq_mask[3];
+ 	rtw_write32(rtwdev, RTK_PCI_HISR0, irq_status[0]);
+ 	rtw_write32(rtwdev, RTK_PCI_HISR1, irq_status[1]);
+-	if (rtw_chip_wcpu_11ac(rtwdev))
++	if (rtw_chip_wcpu_3081(rtwdev))
+ 		rtw_write32(rtwdev, RTK_PCI_HISR3, irq_status[3]);
+ 
+ 	spin_unlock_irqrestore(&rtwpci->hwirq_lock, flags);
+--- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
+@@ -1882,7 +1882,7 @@ const struct rtw_chip_info rtw8703b_hw_s
+ 	.id = RTW_CHIP_TYPE_8703B,
+ 
+ 	.fw_name = "rtw88/rtw8703b_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11N,
++	.wlan_cpu = RTW_WCPU_8051,
+ 	.tx_pkt_desc_sz = 40,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
+@@ -2116,7 +2116,7 @@ const struct rtw_chip_info rtw8723d_hw_s
+ 	.ops = &rtw8723d_ops,
+ 	.id = RTW_CHIP_TYPE_8723D,
+ 	.fw_name = "rtw88/rtw8723d_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11N,
++	.wlan_cpu = RTW_WCPU_8051,
+ 	.tx_pkt_desc_sz = 40,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8812a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.c
+@@ -1038,7 +1038,7 @@ const struct rtw_chip_info rtw8812a_hw_s
+ 	.ops = &rtw8812a_ops,
+ 	.id = RTW_CHIP_TYPE_8812A,
+ 	.fw_name = "rtw88/rtw8812a_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11N,
++	.wlan_cpu = RTW_WCPU_8051,
+ 	.tx_pkt_desc_sz = 40,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.c
+@@ -2180,7 +2180,7 @@ const struct rtw_chip_info rtw8814a_hw_s
+ 	.ops = &rtw8814a_ops,
+ 	.id = RTW_CHIP_TYPE_8814A,
+ 	.fw_name = "rtw88/rtw8814a_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11AC,
++	.wlan_cpu = RTW_WCPU_3081,
+ 	.tx_pkt_desc_sz = 40,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.c
+@@ -1138,7 +1138,7 @@ const struct rtw_chip_info rtw8821a_hw_s
+ 	.ops = &rtw8821a_ops,
+ 	.id = RTW_CHIP_TYPE_8821A,
+ 	.fw_name = "rtw88/rtw8821a_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11N,
++	.wlan_cpu = RTW_WCPU_8051,
+ 	.tx_pkt_desc_sz = 40,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -1973,7 +1973,7 @@ const struct rtw_chip_info rtw8821c_hw_s
+ 	.ops = &rtw8821c_ops,
+ 	.id = RTW_CHIP_TYPE_8821C,
+ 	.fw_name = "rtw88/rtw8821c_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11AC,
++	.wlan_cpu = RTW_WCPU_3081,
+ 	.tx_pkt_desc_sz = 48,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -2513,7 +2513,7 @@ const struct rtw_chip_info rtw8822b_hw_s
+ 	.ops = &rtw8822b_ops,
+ 	.id = RTW_CHIP_TYPE_8822B,
+ 	.fw_name = "rtw88/rtw8822b_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11AC,
++	.wlan_cpu = RTW_WCPU_3081,
+ 	.tx_pkt_desc_sz = 48,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -5332,7 +5332,7 @@ const struct rtw_chip_info rtw8822c_hw_s
+ 	.ops = &rtw8822c_ops,
+ 	.id = RTW_CHIP_TYPE_8822C,
+ 	.fw_name = "rtw88/rtw8822c_fw.bin",
+-	.wlan_cpu = RTW_WCPU_11AC,
++	.wlan_cpu = RTW_WCPU_3081,
+ 	.tx_pkt_desc_sz = 48,
+ 	.tx_buf_desc_sz = 16,
+ 	.rx_pkt_desc_sz = 24,
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -547,7 +547,7 @@ static int rtw_sdio_check_free_txpg(stru
+ {
+ 	unsigned int pages_free, pages_needed;
+ 
+-	if (rtw_chip_wcpu_11n(rtwdev)) {
++	if (rtw_chip_wcpu_8051(rtwdev)) {
+ 		u32 free_txpg;
+ 
+ 		free_txpg = rtw_sdio_read32(rtwdev, REG_SDIO_FREE_TXPG);
+@@ -1030,7 +1030,7 @@ static void rtw_sdio_rx_isr(struct rtw_d
+ 	u32 rx_len, hisr, total_rx_bytes = 0;
+ 
+ 	do {
+-		if (rtw_chip_wcpu_11n(rtwdev))
++		if (rtw_chip_wcpu_8051(rtwdev))
+ 			rx_len = rtw_read16(rtwdev, REG_SDIO_RX0_REQ_LEN);
+ 		else
+ 			rx_len = rtw_read32(rtwdev, REG_SDIO_RX0_REQ_LEN);
+@@ -1042,7 +1042,7 @@ static void rtw_sdio_rx_isr(struct rtw_d
+ 
+ 		total_rx_bytes += rx_len;
+ 
+-		if (rtw_chip_wcpu_11n(rtwdev)) {
++		if (rtw_chip_wcpu_8051(rtwdev)) {
+ 			/* Stop if no more RX requests are pending, even if
+ 			 * rx_len could be greater than zero in the next
+ 			 * iteration. This is needed because the RX buffer may
+@@ -1054,7 +1054,7 @@ static void rtw_sdio_rx_isr(struct rtw_d
+ 			 */
+ 			hisr = rtw_read32(rtwdev, REG_SDIO_HISR);
+ 		} else {
+-			/* RTW_WCPU_11AC chips have improved hardware or
++			/* RTW_WCPU_3081 chips have improved hardware or
+ 			 * firmware and can use rx_len unconditionally.
+ 			 */
+ 			hisr = REG_SDIO_HISR_RX_REQUEST;
diff --git a/package/kernel/mac80211/patches/rtl/0003-wifi-rtw88-Enable-AP-and-adhoc-modes-for-SDIO-again.patch b/package/kernel/mac80211/patches/rtl/0003-wifi-rtw88-Enable-AP-and-adhoc-modes-for-SDIO-again.patch
new file mode 100644
index 0000000000..2ece076e50
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0003-wifi-rtw88-Enable-AP-and-adhoc-modes-for-SDIO-again.patch
@@ -0,0 +1,52 @@
+From 793905c70a56255b04e7cff82b01a300fff822be Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Sat, 7 Jun 2025 21:01:38 +0300
+Subject: [PATCH] wifi: rtw88: Enable AP and adhoc modes for SDIO again
+
+AP mode can be enabled again for SDIO now that the problem was fixed
+in commit b2effcdc2379 ("wifi: rtw88: sdio: map mgmt frames to queue
+TX_DESC_QSEL_MGMT") and commit fc5f5a0ec463 ("wifi: rtw88: sdio: call
+rtw_sdio_indicate_tx_status unconditionally").
+
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/5ac60c1c-9cc8-41b8-871c-a067e74f70ea@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/main.c | 12 ++++--------
+ 1 file changed, 4 insertions(+), 8 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -2219,7 +2219,6 @@ EXPORT_SYMBOL(rtw_core_deinit);
+ 
+ int rtw_register_hw(struct rtw_dev *rtwdev, struct ieee80211_hw *hw)
+ {
+-	bool sta_mode_only = rtwdev->hci.type == RTW_HCI_TYPE_SDIO;
+ 	struct rtw_hal *hal = &rtwdev->hal;
+ 	int max_tx_headroom = 0;
+ 	int ret;
+@@ -2249,12 +2248,9 @@ int rtw_register_hw(struct rtw_dev *rtwd
+ 	ieee80211_hw_set(hw, TX_AMSDU);
+ 	ieee80211_hw_set(hw, SINGLE_SCAN_ON_ALL_BANDS);
+ 
+-	if (sta_mode_only)
+-		hw->wiphy->interface_modes = BIT(NL80211_IFTYPE_STATION);
+-	else
+-		hw->wiphy->interface_modes = BIT(NL80211_IFTYPE_STATION) |
+-					     BIT(NL80211_IFTYPE_AP) |
+-					     BIT(NL80211_IFTYPE_ADHOC);
++	hw->wiphy->interface_modes = BIT(NL80211_IFTYPE_STATION) |
++				     BIT(NL80211_IFTYPE_AP) |
++				     BIT(NL80211_IFTYPE_ADHOC);
+ 	hw->wiphy->available_antennas_tx = hal->antenna_tx;
+ 	hw->wiphy->available_antennas_rx = hal->antenna_rx;
+ 
+@@ -2265,7 +2261,7 @@ int rtw_register_hw(struct rtw_dev *rtwd
+ 	hw->wiphy->max_scan_ssids = RTW_SCAN_MAX_SSIDS;
+ 	hw->wiphy->max_scan_ie_len = rtw_get_max_scan_ie_len(rtwdev);
+ 
+-	if (!sta_mode_only && rtwdev->chip->id == RTW_CHIP_TYPE_8822C) {
++	if (rtwdev->chip->id == RTW_CHIP_TYPE_8822C) {
+ 		hw->wiphy->iface_combinations = rtw_iface_combs;
+ 		hw->wiphy->n_iface_combinations = ARRAY_SIZE(rtw_iface_combs);
+ 	}
diff --git a/package/kernel/mac80211/patches/rtl/0005-wifi-rtw88-coex-Use-bitwise-instead-of-arithmetic-op.patch b/package/kernel/mac80211/patches/rtl/0005-wifi-rtw88-coex-Use-bitwise-instead-of-arithmetic-op.patch
new file mode 100644
index 0000000000..5a52c3b94e
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0005-wifi-rtw88-coex-Use-bitwise-instead-of-arithmetic-op.patch
@@ -0,0 +1,61 @@
+From 34d9a2aa7f5015f69899a8f665b052b8dcf87317 Mon Sep 17 00:00:00 2001
+From: Pei Xiao <xiaopei01@kylinos.cn>
+Date: Tue, 24 Jun 2025 10:52:40 +0800
+Subject: [PATCH] wifi: rtw88: coex: Use bitwise instead of arithmetic operator
+ for flags
+
+This silences the following coccinelle warning:
+  WARNING: sum of probable bitmasks, consider |
+
+Compile tested only.
+
+Signed-off-by: Pei Xiao <xiaopei01@kylinos.cn>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/c68a8642c325f626ac34ccee71d9d9aa69f0c92c.1750733428.git.xiaopei01@kylinos.cn
+---
+ drivers/net/wireless/realtek/rtw88/coex.c | 22 +++++++++++-----------
+ 1 file changed, 11 insertions(+), 11 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/coex.c
++++ b/drivers/net/wireless/realtek/rtw88/coex.c
+@@ -1501,28 +1501,28 @@ static u8 rtw_coex_algorithm(struct rtw_
+ 		algorithm = COEX_ALGO_HFP;
+ 		break;
+ 	case           BPM_HID:
+-	case BPM_HFP + BPM_HID:
++	case BPM_HFP | BPM_HID:
+ 		algorithm = COEX_ALGO_HID;
+ 		break;
+-	case BPM_HFP           + BPM_A2DP:
+-	case           BPM_HID + BPM_A2DP:
+-	case BPM_HFP + BPM_HID + BPM_A2DP:
++	case BPM_HFP           | BPM_A2DP:
++	case           BPM_HID | BPM_A2DP:
++	case BPM_HFP | BPM_HID | BPM_A2DP:
+ 		algorithm = COEX_ALGO_A2DP_HID;
+ 		break;
+-	case BPM_HFP                      + BPM_PAN:
+-	case           BPM_HID            + BPM_PAN:
+-	case BPM_HFP + BPM_HID            + BPM_PAN:
++	case BPM_HFP                      | BPM_PAN:
++	case           BPM_HID            | BPM_PAN:
++	case BPM_HFP | BPM_HID            | BPM_PAN:
+ 		algorithm = COEX_ALGO_PAN_HID;
+ 		break;
+-	case BPM_HFP           + BPM_A2DP + BPM_PAN:
+-	case           BPM_HID + BPM_A2DP + BPM_PAN:
+-	case BPM_HFP + BPM_HID + BPM_A2DP + BPM_PAN:
++	case BPM_HFP           | BPM_A2DP | BPM_PAN:
++	case           BPM_HID | BPM_A2DP | BPM_PAN:
++	case BPM_HFP | BPM_HID | BPM_A2DP | BPM_PAN:
+ 		algorithm = COEX_ALGO_A2DP_PAN_HID;
+ 		break;
+ 	case                                BPM_PAN:
+ 		algorithm = COEX_ALGO_PAN;
+ 		break;
+-	case                     BPM_A2DP + BPM_PAN:
++	case                     BPM_A2DP | BPM_PAN:
+ 		algorithm = COEX_ALGO_A2DP_PAN;
+ 		break;
+ 	case                     BPM_A2DP:
diff --git a/package/kernel/mac80211/patches/rtl/0006-wifi-rtw88-enable-TX-reports-for-the-management-queu.patch b/package/kernel/mac80211/patches/rtl/0006-wifi-rtw88-enable-TX-reports-for-the-management-queu.patch
new file mode 100644
index 0000000000..a200730ddd
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0006-wifi-rtw88-enable-TX-reports-for-the-management-queu.patch
@@ -0,0 +1,225 @@
+From 5f936768300f65d5856d6adf0f8591e2ae716727 Mon Sep 17 00:00:00 2001
+From: Andrey Skvortsov <andrej.skvortzov@gmail.com>
+Date: Fri, 11 Jul 2025 11:47:40 +0300
+Subject: [PATCH] wifi: rtw88: enable TX reports for the management queue
+
+This is needed for AP mode. Otherwise client sees the network, but
+can't connect to it.
+
+REG_FWHW_TXQ_CTRL+1 is set to WLAN_TXQ_RPT_EN (0x1F) in common mac
+init function (__rtw8723x_mac_init), but the value was overwritten
+from mac table later.
+
+Tables with register values for phy parameters initialization are
+copied from vendor driver usually. When table will be regenerated,
+manual modifications to it may be lost. To avoid regressions in this
+case new callback mac_postinit is introduced, that is called after
+parameters from table are set.
+
+Tested on rtl8723cs, that reuses rtw8703b driver.
+
+Signed-off-by: Andrey Skvortsov <andrej.skvortzov@gmail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250711084740.3396766-1-andrej.skvortzov@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/mac.c      | 10 ++++++++++
+ drivers/net/wireless/realtek/rtw88/mac.h      |  1 +
+ drivers/net/wireless/realtek/rtw88/main.c     |  6 ++++++
+ drivers/net/wireless/realtek/rtw88/main.h     |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8703b.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8723d.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8723x.c |  9 ++++++++-
+ drivers/net/wireless/realtek/rtw88/rtw8723x.h |  6 ++++++
+ drivers/net/wireless/realtek/rtw88/rtw8812a.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8814a.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8821a.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8821c.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822b.c |  1 +
+ drivers/net/wireless/realtek/rtw88/rtw8822c.c |  1 +
+ 14 files changed, 40 insertions(+), 1 deletion(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/mac.c
++++ b/drivers/net/wireless/realtek/rtw88/mac.c
+@@ -1409,3 +1409,13 @@ int rtw_mac_init(struct rtw_dev *rtwdev)
+ 
+ 	return 0;
+ }
++
++int rtw_mac_postinit(struct rtw_dev *rtwdev)
++{
++	const struct rtw_chip_info *chip = rtwdev->chip;
++
++	if (!chip->ops->mac_postinit)
++		return 0;
++
++	return chip->ops->mac_postinit(rtwdev);
++}
+--- a/drivers/net/wireless/realtek/rtw88/mac.h
++++ b/drivers/net/wireless/realtek/rtw88/mac.h
+@@ -38,6 +38,7 @@ void rtw_write_firmware_page(struct rtw_
+ 			     const u8 *data, u32 size);
+ int rtw_download_firmware(struct rtw_dev *rtwdev, struct rtw_fw_state *fw);
+ int rtw_mac_init(struct rtw_dev *rtwdev);
++int rtw_mac_postinit(struct rtw_dev *rtwdev);
+ void rtw_mac_flush_queues(struct rtw_dev *rtwdev, u32 queues, bool drop);
+ int rtw_set_trx_fifo_info(struct rtw_dev *rtwdev);
+ int rtw_ddma_to_fw_fifo(struct rtw_dev *rtwdev, u32 ocp_src, u32 size);
+--- a/drivers/net/wireless/realtek/rtw88/main.c
++++ b/drivers/net/wireless/realtek/rtw88/main.c
+@@ -1412,6 +1412,12 @@ int rtw_power_on(struct rtw_dev *rtwdev)
+ 
+ 	chip->ops->phy_set_param(rtwdev);
+ 
++	ret = rtw_mac_postinit(rtwdev);
++	if (ret) {
++		rtw_err(rtwdev, "failed to configure mac in postinit\n");
++		goto err_off;
++	}
++
+ 	ret = rtw_hci_start(rtwdev);
+ 	if (ret) {
+ 		rtw_err(rtwdev, "failed to start hci\n");
+--- a/drivers/net/wireless/realtek/rtw88/main.h
++++ b/drivers/net/wireless/realtek/rtw88/main.h
+@@ -858,6 +858,7 @@ struct rtw_chip_ops {
+ 	int (*power_on)(struct rtw_dev *rtwdev);
+ 	void (*power_off)(struct rtw_dev *rtwdev);
+ 	int (*mac_init)(struct rtw_dev *rtwdev);
++	int (*mac_postinit)(struct rtw_dev *rtwdev);
+ 	int (*dump_fw_crash)(struct rtw_dev *rtwdev);
+ 	void (*shutdown)(struct rtw_dev *rtwdev);
+ 	int (*read_efuse)(struct rtw_dev *rtwdev, u8 *map);
+--- a/drivers/net/wireless/realtek/rtw88/rtw8703b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8703b.c
+@@ -1832,6 +1832,7 @@ static const struct rtw_chip_ops rtw8703
+ 	.power_on		= rtw_power_on,
+ 	.power_off		= rtw_power_off,
+ 	.mac_init		= rtw8723x_mac_init,
++	.mac_postinit		= rtw8723x_mac_postinit,
+ 	.dump_fw_crash		= NULL,
+ 	.shutdown		= NULL,
+ 	.read_efuse		= rtw8703b_read_efuse,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723d.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723d.c
+@@ -1397,6 +1397,7 @@ static const struct rtw_chip_ops rtw8723
+ 	.query_phy_status	= query_phy_status,
+ 	.set_channel		= rtw8723d_set_channel,
+ 	.mac_init		= rtw8723x_mac_init,
++	.mac_postinit		= rtw8723x_mac_postinit,
+ 	.shutdown		= rtw8723d_shutdown,
+ 	.read_rf		= rtw_phy_read_rf_sipi,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723x.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723x.c
+@@ -353,7 +353,6 @@ static int __rtw8723x_read_efuse(struct
+ 
+ static int __rtw8723x_mac_init(struct rtw_dev *rtwdev)
+ {
+-	rtw_write8(rtwdev, REG_FWHW_TXQ_CTRL + 1, WLAN_TXQ_RPT_EN);
+ 	rtw_write32(rtwdev, REG_TCR, BIT_TCR_CFG);
+ 
+ 	rtw_write16(rtwdev, REG_RXFLTMAP0, WLAN_RX_FILTER0);
+@@ -370,6 +369,13 @@ static int __rtw8723x_mac_init(struct rt
+ 	return 0;
+ }
+ 
++static int __rtw8723x_mac_postinit(struct rtw_dev *rtwdev)
++{
++	rtw_write8(rtwdev, REG_FWHW_TXQ_CTRL + 1, WLAN_TXQ_RPT_EN);
++
++	return 0;
++}
++
+ static void __rtw8723x_cfg_ldo25(struct rtw_dev *rtwdev, bool enable)
+ {
+ 	u8 ldo_pwr;
+@@ -760,6 +766,7 @@ const struct rtw8723x_common rtw8723x_co
+ 	.lck = __rtw8723x_lck,
+ 	.read_efuse = __rtw8723x_read_efuse,
+ 	.mac_init = __rtw8723x_mac_init,
++	.mac_postinit = __rtw8723x_mac_postinit,
+ 	.cfg_ldo25 = __rtw8723x_cfg_ldo25,
+ 	.set_tx_power_index = __rtw8723x_set_tx_power_index,
+ 	.efuse_grant = __rtw8723x_efuse_grant,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8723x.h
++++ b/drivers/net/wireless/realtek/rtw88/rtw8723x.h
+@@ -137,6 +137,7 @@ struct rtw8723x_common {
+ 	void (*lck)(struct rtw_dev *rtwdev);
+ 	int (*read_efuse)(struct rtw_dev *rtwdev, u8 *log_map);
+ 	int (*mac_init)(struct rtw_dev *rtwdev);
++	int (*mac_postinit)(struct rtw_dev *rtwdev);
+ 	void (*cfg_ldo25)(struct rtw_dev *rtwdev, bool enable);
+ 	void (*set_tx_power_index)(struct rtw_dev *rtwdev);
+ 	void (*efuse_grant)(struct rtw_dev *rtwdev, bool on);
+@@ -383,6 +384,11 @@ static inline int rtw8723x_mac_init(stru
+ 	return rtw8723x_common.mac_init(rtwdev);
+ }
+ 
++static inline int rtw8723x_mac_postinit(struct rtw_dev *rtwdev)
++{
++	return rtw8723x_common.mac_postinit(rtwdev);
++}
++
+ static inline void rtw8723x_cfg_ldo25(struct rtw_dev *rtwdev, bool enable)
+ {
+ 	rtw8723x_common.cfg_ldo25(rtwdev, enable);
+--- a/drivers/net/wireless/realtek/rtw88/rtw8812a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8812a.c
+@@ -919,6 +919,7 @@ static const struct rtw_chip_ops rtw8812
+ 	.query_phy_status	= rtw8812a_query_phy_status,
+ 	.set_channel		= rtw88xxa_set_channel,
+ 	.mac_init		= NULL,
++	.mac_postinit		= NULL,
+ 	.read_rf		= rtw88xxa_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+ 	.set_antenna		= NULL,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8814a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8814a.c
+@@ -2055,6 +2055,7 @@ static const struct rtw_chip_ops rtw8814
+ 	.query_phy_status	= rtw8814a_query_phy_status,
+ 	.set_channel		= rtw8814a_set_channel,
+ 	.mac_init		= rtw8814a_mac_init,
++	.mac_postinit		= NULL,
+ 	.read_rf		= rtw_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+ 	.set_tx_power_index	= rtw8814a_set_tx_power_index,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821a.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821a.c
+@@ -865,6 +865,7 @@ static const struct rtw_chip_ops rtw8821
+ 	.query_phy_status	= rtw8821a_query_phy_status,
+ 	.set_channel		= rtw88xxa_set_channel,
+ 	.mac_init		= NULL,
++	.mac_postinit		= NULL,
+ 	.read_rf		= rtw88xxa_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+ 	.set_antenna		= NULL,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8821c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8821c.c
+@@ -1663,6 +1663,7 @@ static const struct rtw_chip_ops rtw8821
+ 	.query_phy_status	= query_phy_status,
+ 	.set_channel		= rtw8821c_set_channel,
+ 	.mac_init		= rtw8821c_mac_init,
++	.mac_postinit		= NULL,
+ 	.read_rf		= rtw_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+ 	.set_antenna		= NULL,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822b.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822b.c
+@@ -2153,6 +2153,7 @@ static const struct rtw_chip_ops rtw8822
+ 	.query_phy_status	= query_phy_status,
+ 	.set_channel		= rtw8822b_set_channel,
+ 	.mac_init		= rtw8822b_mac_init,
++	.mac_postinit		= NULL,
+ 	.read_rf		= rtw_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_sipi,
+ 	.set_tx_power_index	= rtw8822b_set_tx_power_index,
+--- a/drivers/net/wireless/realtek/rtw88/rtw8822c.c
++++ b/drivers/net/wireless/realtek/rtw88/rtw8822c.c
+@@ -4963,6 +4963,7 @@ static const struct rtw_chip_ops rtw8822
+ 	.query_phy_status	= query_phy_status,
+ 	.set_channel		= rtw8822c_set_channel,
+ 	.mac_init		= rtw8822c_mac_init,
++	.mac_postinit		= NULL,
+ 	.dump_fw_crash		= rtw8822c_dump_fw_crash,
+ 	.read_rf		= rtw_phy_read_rf,
+ 	.write_rf		= rtw_phy_write_rf_reg_mix,
diff --git a/package/kernel/mac80211/patches/rtl/0008-wifi-rtw88-sdio-use-indirect-IO-for-device-registers.patch b/package/kernel/mac80211/patches/rtl/0008-wifi-rtw88-sdio-use-indirect-IO-for-device-registers.patch
new file mode 100644
index 0000000000..cccb8d0d8f
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0008-wifi-rtw88-sdio-use-indirect-IO-for-device-registers.patch
@@ -0,0 +1,42 @@
+From 58de1f91e033b1fface8d8948984583125f93736 Mon Sep 17 00:00:00 2001
+From: Ping-Ke Shih <pkshih@realtek.com>
+Date: Thu, 24 Jul 2025 08:48:15 +0800
+Subject: [PATCH] wifi: rtw88: sdio: use indirect IO for device registers
+ before power-on
+
+The register REG_SYS_CFG1 is used to determine chip basic information
+as arguments of following flows, such as download firmware and load PHY
+parameters, so driver read the value early (before power-on).
+
+However, the direct IO is disallowed before power-on, or it causes wrong
+values, which driver recognizes a chip as a wrong type RF_1T1R, but
+actually RF_2T2R, causing driver warns:
+
+  rtw88_8822cs mmc1:0001:1: unsupported rf path (1)
+
+Fix it by using indirect IO before power-on.
+
+Reported-by: Piotr Oniszczuk <piotr.oniszczuk@gmail.com>
+Closes: https://lore.kernel.org/linux-wireless/699C22B4-A3E3-4206-97D0-22AB3348EBF6@gmail.com/T/#t
+Suggested-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Tested-by: Piotr Oniszczuk <piotr.oniszczuk@gmail.com>
+Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/20250724004815.7043-1-pkshih@realtek.com
+---
+ drivers/net/wireless/realtek/rtw88/sdio.c | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+--- a/drivers/net/wireless/realtek/rtw88/sdio.c
++++ b/drivers/net/wireless/realtek/rtw88/sdio.c
+@@ -144,6 +144,10 @@ static u32 rtw_sdio_to_io_address(struct
+ 
+ static bool rtw_sdio_use_direct_io(struct rtw_dev *rtwdev, u32 addr)
+ {
++	if (!test_bit(RTW_FLAG_POWERON, rtwdev->flags) &&
++	    !rtw_sdio_is_bus_addr(addr))
++		return false;
++
+ 	return !rtw_sdio_is_sdio30_supported(rtwdev) ||
+ 		rtw_sdio_is_bus_addr(addr);
+ }
diff --git a/package/kernel/mac80211/patches/rtl/0009-wifi-rtw88-Lock-rtwdev-mutex-before-setting-the-LED.patch b/package/kernel/mac80211/patches/rtl/0009-wifi-rtw88-Lock-rtwdev-mutex-before-setting-the-LED.patch
new file mode 100644
index 0000000000..193971a722
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0009-wifi-rtw88-Lock-rtwdev-mutex-before-setting-the-LED.patch
@@ -0,0 +1,57 @@
+From 26a8bf978ae9cd7688af1d08bc8760674d372e22 Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Fri, 1 Aug 2025 23:08:24 +0300
+Subject: [PATCH] wifi: rtw88: Lock rtwdev->mutex before setting the LED
+
+Some users report that the LED blinking breaks AP mode somehow. Most
+likely the LED code and the dynamic mechanism are trying to access the
+hardware registers at the same time. Fix it by locking rtwdev->mutex
+before setting the LED and unlocking it after.
+
+Fixes: 4b6652bc6d8d ("wifi: rtw88: Add support for LED blinking")
+Closes: https://github.com/lwfinger/rtw88/issues/305
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/ed69fa07-8678-4a40-af44-65e7b1862197@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/led.c | 16 +++++++++++++---
+ 1 file changed, 13 insertions(+), 3 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/led.c
++++ b/drivers/net/wireless/realtek/rtw88/led.c
+@@ -6,13 +6,23 @@
+ #include "debug.h"
+ #include "led.h"
+ 
+-static int rtw_led_set_blocking(struct led_classdev *led,
+-				enum led_brightness brightness)
++static void rtw_led_set(struct led_classdev *led,
++			enum led_brightness brightness)
+ {
+ 	struct rtw_dev *rtwdev = container_of(led, struct rtw_dev, led_cdev);
+ 
++	mutex_lock(&rtwdev->mutex);
++
+ 	rtwdev->chip->ops->led_set(led, brightness);
+ 
++	mutex_unlock(&rtwdev->mutex);
++}
++
++static int rtw_led_set_blocking(struct led_classdev *led,
++				enum led_brightness brightness)
++{
++	rtw_led_set(led, brightness);
++
+ 	return 0;
+ }
+ 
+@@ -37,7 +47,7 @@ void rtw_led_init(struct rtw_dev *rtwdev
+ 		return;
+ 
+ 	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
+-		led->brightness_set = rtwdev->chip->ops->led_set;
++		led->brightness_set = rtw_led_set;
+ 	else
+ 		led->brightness_set_blocking = rtw_led_set_blocking;
+ 
diff --git a/package/kernel/mac80211/patches/rtl/0010-wifi-rtw88-Use-led-brightness_set_blocking-for-PCI-t.patch b/package/kernel/mac80211/patches/rtl/0010-wifi-rtw88-Use-led-brightness_set_blocking-for-PCI-t.patch
new file mode 100644
index 0000000000..12ed8dfac2
--- /dev/null
+++ b/package/kernel/mac80211/patches/rtl/0010-wifi-rtw88-Use-led-brightness_set_blocking-for-PCI-t.patch
@@ -0,0 +1,101 @@
+From fce6fee0817b8899e0ee38ab6b98f0d7e939ceed Mon Sep 17 00:00:00 2001
+From: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Date: Tue, 19 Aug 2025 21:46:02 +0300
+Subject: [PATCH] wifi: rtw88: Use led->brightness_set_blocking for PCI too
+
+Commit 26a8bf978ae9 ("wifi: rtw88: Lock rtwdev->mutex before setting
+the LED") made rtw_led_set() sleep, but that's not allowed. Fix it by
+using the brightness_set_blocking member of struct led_classdev for
+PCI devices too. This one is allowed to sleep.
+
+bad: scheduling from the idle thread!
+nix kernel: CPU: 7 UID: 0 PID: 0 Comm: swapper/7 Tainted: G        W  O        6.16.0 #1-NixOS PREEMPT(voluntary)
+nix kernel: Tainted: [W]=WARN, [O]=OOT_MODULE
+nix kernel: Hardware name: [REDACTED]
+nix kernel: Call Trace:
+nix kernel:  <IRQ>
+nix kernel:  dump_stack_lvl+0x63/0x90
+nix kernel:  dequeue_task_idle+0x2d/0x50
+nix kernel:  __schedule+0x191/0x1310
+nix kernel:  ? xas_load+0x11/0xd0
+nix kernel:  schedule+0x2b/0xe0
+nix kernel:  schedule_preempt_disabled+0x19/0x30
+nix kernel:  __mutex_lock.constprop.0+0x3fd/0x7d0
+nix kernel:  rtw_led_set+0x27/0x60 [rtw_core]
+nix kernel:  led_blink_set_nosleep+0x56/0xb0
+nix kernel:  led_trigger_blink+0x49/0x80
+nix kernel:  ? __pfx_tpt_trig_timer+0x10/0x10 [mac80211]
+nix kernel:  call_timer_fn+0x2f/0x140
+nix kernel:  ? __pfx_tpt_trig_timer+0x10/0x10 [mac80211]
+nix kernel:  __run_timers+0x21a/0x2b0
+nix kernel:  run_timer_softirq+0x8e/0x100
+nix kernel:  handle_softirqs+0xea/0x2c0
+nix kernel:  ? srso_alias_return_thunk+0x5/0xfbef5
+nix kernel:  __irq_exit_rcu+0xdc/0x100
+nix kernel:  sysvec_apic_timer_interrupt+0x7c/0x90
+nix kernel:  </IRQ>
+nix kernel:  <TASK>
+nix kernel:  asm_sysvec_apic_timer_interrupt+0x1a/0x20
+nix kernel: RIP: 0010:cpuidle_enter_state+0xcc/0x450
+nix kernel: Code: 00 e8 08 7c 2e ff e8 d3 ee ff ff 49 89 c6 0f 1f 44 00 00 31 ff e8 c4 d1 2c ff 80 7d d7 00 0f 85 5d 02 00 00 fb 0f 1f 44 00 00 <45> 85 ff 0f 88 a0 01 00 00 49 63 f7 4c 89 f2 48 8d 0>
+nix kernel: RSP: 0018:ffffd579801c7e68 EFLAGS: 00000246
+nix kernel: RAX: 0000000000000000 RBX: 0000000000000003 RCX: 0000000000000000
+nix kernel: RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
+nix kernel: RBP: ffffd579801c7ea0 R08: 0000000000000000 R09: 0000000000000000
+nix kernel: R10: 0000000000000000 R11: 0000000000000000 R12: ffff8eab0462a400
+nix kernel: R13: ffffffff9a7d7a20 R14: 00000003aebe751d R15: 0000000000000003
+nix kernel:  ? cpuidle_enter_state+0xbc/0x450
+nix kernel:  cpuidle_enter+0x32/0x50
+nix kernel:  do_idle+0x1b1/0x210
+nix kernel:  cpu_startup_entry+0x2d/0x30
+nix kernel:  start_secondary+0x118/0x140
+nix kernel:  common_startup_64+0x13e/0x141
+nix kernel:  </TASK>
+
+Fixes: 26a8bf978ae9 ("wifi: rtw88: Lock rtwdev->mutex before setting the LED")
+Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
+Acked-by: Ping-Ke Shih <pkshih@realtek.com>
+Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
+Link: https://patch.msgid.link/ad8a49ef-4f2d-4a61-8292-952db9c4eb65@gmail.com
+---
+ drivers/net/wireless/realtek/rtw88/led.c | 15 +++------------
+ 1 file changed, 3 insertions(+), 12 deletions(-)
+
+--- a/drivers/net/wireless/realtek/rtw88/led.c
++++ b/drivers/net/wireless/realtek/rtw88/led.c
+@@ -6,8 +6,8 @@
+ #include "debug.h"
+ #include "led.h"
+ 
+-static void rtw_led_set(struct led_classdev *led,
+-			enum led_brightness brightness)
++static int rtw_led_set(struct led_classdev *led,
++		       enum led_brightness brightness)
+ {
+ 	struct rtw_dev *rtwdev = container_of(led, struct rtw_dev, led_cdev);
+ 
+@@ -16,12 +16,6 @@ static void rtw_led_set(struct led_class
+ 	rtwdev->chip->ops->led_set(led, brightness);
+ 
+ 	mutex_unlock(&rtwdev->mutex);
+-}
+-
+-static int rtw_led_set_blocking(struct led_classdev *led,
+-				enum led_brightness brightness)
+-{
+-	rtw_led_set(led, brightness);
+ 
+ 	return 0;
+ }
+@@ -46,10 +40,7 @@ void rtw_led_init(struct rtw_dev *rtwdev
+ 	if (!rtwdev->chip->ops->led_set)
+ 		return;
+ 
+-	if (rtw_hci_type(rtwdev) == RTW_HCI_TYPE_PCIE)
+-		led->brightness_set = rtw_led_set;
+-	else
+-		led->brightness_set_blocking = rtw_led_set_blocking;
++	led->brightness_set_blocking = rtw_led_set;
+ 
+ 	snprintf(rtwdev->led_name, sizeof(rtwdev->led_name),
+ 		 "rtw88-%s", dev_name(rtwdev->dev));
diff --git a/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch b/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
index 23a4254ec7..132b0c670e 100644
--- a/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
+++ b/package/kernel/mac80211/patches/subsys/110-mac80211_keep_keys_on_stop_ap.patch
@@ -9,7 +9,7 @@ Used for AP+STA support in OpenWrt - preserve AP mode keys across STA reconnect
 
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -1691,12 +1691,6 @@ static int ieee80211_stop_ap(struct wiph
+@@ -1695,12 +1695,6 @@ static int ieee80211_stop_ap(struct wiph
  
  	__sta_info_flush(sdata, true, link_id, NULL);
  
diff --git a/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch b/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
index aec9a32667..7cf6eec095 100644
--- a/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
+++ b/package/kernel/mac80211/patches/subsys/130-disable_auto_vif.patch
@@ -1,6 +1,6 @@
 --- a/net/mac80211/main.c
 +++ b/net/mac80211/main.c
-@@ -1595,24 +1595,6 @@ int ieee80211_register_hw(struct ieee802
+@@ -1611,24 +1611,6 @@ int ieee80211_register_hw(struct ieee802
  
  	ieee80211_check_wbrf_support(local);
  
diff --git a/package/kernel/mac80211/patches/subsys/210-ap_scan.patch b/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
index 1d56827d0c..b592c4084f 100644
--- a/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
+++ b/package/kernel/mac80211/patches/subsys/210-ap_scan.patch
@@ -8,7 +8,7 @@ Subject: [PATCH] mac80211: allow scans in access point mode (for site survey)
 
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -2925,6 +2925,8 @@ static int ieee80211_scan(struct wiphy *
+@@ -2929,6 +2929,8 @@ static int ieee80211_scan(struct wiphy *
  		 */
  		fallthrough;
  	case NL80211_IFTYPE_AP:
diff --git a/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch b/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
index 17e2151d3c..2382add6b6 100644
--- a/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
+++ b/package/kernel/mac80211/patches/subsys/305-mac80211-increase-quantum-for-airtime-scheduler.patch
@@ -23,7 +23,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/mac80211/tx.c
 +++ b/net/mac80211/tx.c
-@@ -4066,7 +4066,7 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4074,7 +4074,7 @@ struct ieee80211_txq *ieee80211_next_txq
  
  		if (deficit < 0)
  			sta->airtime[txqi->txq.ac].deficit +=
@@ -32,7 +32,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  		if (deficit < 0 || !aql_check) {
  			list_move_tail(&txqi->schedule_order,
-@@ -4209,7 +4209,8 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4219,7 +4219,8 @@ bool ieee80211_txq_may_transmit(struct i
  		}
  		sta = container_of(iter->txq.sta, struct sta_info, sta);
  		if (ieee80211_sta_deficit(sta, ac) < 0)
@@ -42,7 +42,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		list_move_tail(&iter->schedule_order, &local->active_txqs[ac]);
  	}
  
-@@ -4217,7 +4218,7 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4227,7 +4228,7 @@ bool ieee80211_txq_may_transmit(struct i
  	if (sta->airtime[ac].deficit >= 0)
  		goto out;
  
diff --git a/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch b/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
index 8197b069f6..3e322894e9 100644
--- a/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
+++ b/package/kernel/mac80211/patches/subsys/310-cfg80211-allow-grace-period-for-DFS-available-after-.patch
@@ -128,7 +128,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/wireless/mlme.c
 +++ b/net/wireless/mlme.c
-@@ -1038,6 +1038,8 @@ void cfg80211_dfs_channels_update_work(s
+@@ -1039,6 +1039,8 @@ void cfg80211_dfs_channels_update_work(s
  			if (c->dfs_state == NL80211_DFS_UNAVAILABLE) {
  				time_dfs_update = IEEE80211_DFS_MIN_NOP_TIME_MS;
  				radar_event = NL80211_RADAR_NOP_FINISHED;
@@ -137,7 +137,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  			} else {
  				if (regulatory_pre_cac_allowed(wiphy) ||
  				    cfg80211_any_wiphy_oper_chan(wiphy, c))
-@@ -1045,11 +1047,10 @@ void cfg80211_dfs_channels_update_work(s
+@@ -1046,11 +1048,10 @@ void cfg80211_dfs_channels_update_work(s
  
  				time_dfs_update = REG_PRE_CAC_EXPIRY_GRACE_MS;
  				radar_event = NL80211_RADAR_PRE_CAC_EXPIRED;
diff --git a/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch b/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
index f8751b30ae..5e0c2e2c8e 100644
--- a/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
+++ b/package/kernel/mac80211/patches/subsys/320-mac80211-add-AQL-support-for-broadcast-packets.patch
@@ -70,7 +70,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
 --- a/net/mac80211/ieee80211_i.h
 +++ b/net/mac80211/ieee80211_i.h
-@@ -1377,10 +1377,12 @@ struct ieee80211_local {
+@@ -1392,10 +1392,12 @@ struct ieee80211_local {
  	spinlock_t handle_wake_tx_queue_lock;
  
  	u16 airtime_flags;
@@ -85,7 +85,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	const struct ieee80211_ops *ops;
 --- a/net/mac80211/main.c
 +++ b/net/mac80211/main.c
-@@ -959,6 +959,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
+@@ -970,6 +970,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
  	spin_lock_init(&local->rx_path_lock);
  	spin_lock_init(&local->queue_stop_reason_lock);
  
@@ -127,7 +127,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  			atomic_add(tx_airtime,
 --- a/net/mac80211/tx.c
 +++ b/net/mac80211/tx.c
-@@ -2539,7 +2539,7 @@ static u16 ieee80211_store_ack_skb(struc
+@@ -2546,7 +2546,7 @@ static u16 ieee80211_store_ack_skb(struc
  
  		spin_lock_irqsave(&local->ack_status_lock, flags);
  		id = idr_alloc(&local->ack_status_frames, ack_skb,
@@ -136,7 +136,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  		spin_unlock_irqrestore(&local->ack_status_lock, flags);
  
  		if (id >= 0) {
-@@ -3967,20 +3967,20 @@ begin:
+@@ -3975,20 +3975,20 @@ begin:
  encap_out:
  	info->control.vif = vif;
  
@@ -167,7 +167,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	}
  
  	return skb;
-@@ -4032,6 +4032,7 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4040,6 +4040,7 @@ struct ieee80211_txq *ieee80211_next_txq
  	struct ieee80211_txq *ret = NULL;
  	struct txq_info *txqi = NULL, *head = NULL;
  	bool found_eligible_txq = false;
@@ -175,7 +175,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  	spin_lock_bh(&local->active_txq_lock[ac]);
  
-@@ -4055,26 +4056,26 @@ struct ieee80211_txq *ieee80211_next_txq
+@@ -4063,26 +4064,26 @@ struct ieee80211_txq *ieee80211_next_txq
  	if (!head)
  		head = txqi;
  
@@ -214,7 +214,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	if (txqi->schedule_round == local->schedule_round[ac])
  		goto out;
  
-@@ -4139,7 +4140,8 @@ bool ieee80211_txq_airtime_check(struct
+@@ -4149,7 +4150,8 @@ bool ieee80211_txq_airtime_check(struct
  		return true;
  
  	if (!txq->sta)
@@ -224,7 +224,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  
  	if (unlikely(txq->tid == IEEE80211_NUM_TIDS))
  		return true;
-@@ -4188,15 +4190,15 @@ bool ieee80211_txq_may_transmit(struct i
+@@ -4198,15 +4200,15 @@ bool ieee80211_txq_may_transmit(struct i
  
  	spin_lock_bh(&local->active_txq_lock[ac]);
  
diff --git a/package/kernel/mac80211/patches/subsys/330-wifi-mac80211-Do-not-schedule-stopped-TXQs.patch b/package/kernel/mac80211/patches/subsys/330-wifi-mac80211-Do-not-schedule-stopped-TXQs.patch
deleted file mode 100644
index 78240650d1..0000000000
--- a/package/kernel/mac80211/patches/subsys/330-wifi-mac80211-Do-not-schedule-stopped-TXQs.patch
+++ /dev/null
@@ -1,36 +0,0 @@
-From: Alexander Wetzel <Alexander@wetzel-home.de>
-Date: Thu, 17 Jul 2025 18:25:46 +0200
-Subject: [PATCH] wifi: mac80211: Do not schedule stopped TXQs
-
-Ignore TXQs with the flag IEEE80211_TXQ_STOP when scheduling a queue.
-
-The flag is only set after all fragments have been dequeued and won't
-allow dequeueing other frames as long as the flag is set.
-
-For drivers using ieee80211_txq_schedule_start() this prevents an
-loop trying to push the queued frames while IEEE80211_TXQ_STOP is set:
-
-After setting IEEE80211_TXQ_STOP the driver will call
-ieee80211_return_txq(). Which calls __ieee80211_schedule_txq(), detects
-that there sill are frames in the queue and immediately restarts the
-stopped TXQ. Which can't dequeue any frame and thus starts over the loop.
-
-Signed-off-by: Alexander Wetzel <Alexander@wetzel-home.de>
-Fixes: ba8c3d6f16a1 ("mac80211: add an intermediate software queue implementation")
-Link: https://patch.msgid.link/20250717162547.94582-2-Alexander@wetzel-home.de
-Signed-off-by: Johannes Berg <johannes.berg@intel.com>
----
-
---- a/net/mac80211/tx.c
-+++ b/net/mac80211/tx.c
-@@ -4099,7 +4099,9 @@ void __ieee80211_schedule_txq(struct iee
- 
- 	spin_lock_bh(&local->active_txq_lock[txq->ac]);
- 
--	has_queue = force || txq_has_queue(txq);
-+	has_queue = force ||
-+		    (!test_bit(IEEE80211_TXQ_STOP, &txqi->flags) &&
-+		     txq_has_queue(txq));
- 	if (list_empty(&txqi->schedule_order) &&
- 	    (has_queue || ieee80211_txq_keep_active(txqi))) {
- 		/* If airtime accounting is active, always enqueue STAs at the
diff --git a/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-Don-t-call-fq_flow_idx-for-management-.patch b/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-Don-t-call-fq_flow_idx-for-management-.patch
deleted file mode 100644
index b33bf5ca18..0000000000
--- a/package/kernel/mac80211/patches/subsys/331-wifi-mac80211-Don-t-call-fq_flow_idx-for-management-.patch
+++ /dev/null
@@ -1,33 +0,0 @@
-From: Alexander Wetzel <Alexander@wetzel-home.de>
-Date: Thu, 17 Jul 2025 18:25:47 +0200
-Subject: [PATCH] wifi: mac80211: Don't call fq_flow_idx() for management
- frames
-
-skb_get_hash() can only be used when the skb is linked to a netdev
-device.
-
-Signed-off-by: Alexander Wetzel <Alexander@wetzel-home.de>
-Fixes: 73bc9e0af594 ("mac80211: don't apply flow control on management frames")
-Link: https://patch.msgid.link/20250717162547.94582-3-Alexander@wetzel-home.de
-Signed-off-by: Johannes Berg <johannes.berg@intel.com>
----
-
---- a/net/mac80211/tx.c
-+++ b/net/mac80211/tx.c
-@@ -1428,7 +1428,7 @@ static void ieee80211_txq_enqueue(struct
- {
- 	struct fq *fq = &local->fq;
- 	struct fq_tin *tin = &txqi->tin;
--	u32 flow_idx = fq_flow_idx(fq, skb);
-+	u32 flow_idx;
- 
- 	ieee80211_set_skb_enqueue_time(skb);
- 
-@@ -1444,6 +1444,7 @@ static void ieee80211_txq_enqueue(struct
- 			IEEE80211_TX_INTCFL_NEED_TXPROCESSING;
- 		__skb_queue_tail(&txqi->frags, skb);
- 	} else {
-+		flow_idx = fq_flow_idx(fq, skb);
- 		fq_tin_enqueue(fq, tin, flow_idx, skb,
- 			       fq_skb_free_func);
- 	}
diff --git a/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-Check-802.11-encaps-offloading-in-ieee.patch b/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-Check-802.11-encaps-offloading-in-ieee.patch
deleted file mode 100644
index 8ff0982266..0000000000
--- a/package/kernel/mac80211/patches/subsys/332-wifi-mac80211-Check-802.11-encaps-offloading-in-ieee.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From: Remi Pommarel <repk@triplefau.lt>
-Date: Thu, 17 Jul 2025 17:45:28 +0200
-Subject: [PATCH] wifi: mac80211: Check 802.11 encaps offloading in
- ieee80211_tx_h_select_key()
-
-With 802.11 encapsulation offloading, ieee80211_tx_h_select_key() is
-called on 802.3 frames. In that case do not try to use skb data as
-valid 802.11 headers.
-
-Reported-by: Bert Karwatzki <spasswolf@web.de>
-Closes: https://lore.kernel.org/linux-wireless/20250410215527.3001-1-spasswolf@web.de
-Fixes: bb42f2d13ffc ("mac80211: Move reorder-sensitive TX handlers to after TXQ dequeue")
-Signed-off-by: Remi Pommarel <repk@triplefau.lt>
-Link: https://patch.msgid.link/1af4b5b903a5fca5ebe67333d5854f93b2be5abe.1752765971.git.repk@triplefau.lt
-Signed-off-by: Johannes Berg <johannes.berg@intel.com>
----
-
---- a/net/mac80211/tx.c
-+++ b/net/mac80211/tx.c
-@@ -612,6 +612,12 @@ ieee80211_tx_h_select_key(struct ieee802
- 	else
- 		tx->key = NULL;
- 
-+	if (info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP) {
-+		if (tx->key && tx->key->flags & KEY_FLAG_UPLOADED_TO_HARDWARE)
-+			info->control.hw_key = &tx->key->conf;
-+		return TX_CONTINUE;
-+	}
-+
- 	if (tx->key) {
- 		bool skip_hw = false;
- 
diff --git a/package/kernel/mac80211/patches/subsys/333-Reapply-wifi-mac80211-Update-skb-s-control-block-key.patch b/package/kernel/mac80211/patches/subsys/333-Reapply-wifi-mac80211-Update-skb-s-control-block-key.patch
deleted file mode 100644
index 5ef6d25e22..0000000000
--- a/package/kernel/mac80211/patches/subsys/333-Reapply-wifi-mac80211-Update-skb-s-control-block-key.patch
+++ /dev/null
@@ -1,27 +0,0 @@
-From: Remi Pommarel <repk@triplefau.lt>
-Date: Thu, 17 Jul 2025 17:45:29 +0200
-Subject: [PATCH] Reapply "wifi: mac80211: Update skb's control block key in
- ieee80211_tx_dequeue()"
-
-This reverts commit 0937cb5f345c ("Revert "wifi: mac80211: Update
-skb's control block key in ieee80211_tx_dequeue()"").
-
-This commit broke TX with 802.11 encapsulation HW offloading, now that
-this is fixed, reapply it.
-
-Fixes: bb42f2d13ffc ("mac80211: Move reorder-sensitive TX handlers to after TXQ dequeue")
-Signed-off-by: Remi Pommarel <repk@triplefau.lt>
-Link: https://patch.msgid.link/66b8fc39fb0194fa06c9ca7eeb6ffe0118dcb3ec.1752765971.git.repk@triplefau.lt
-Signed-off-by: Johannes Berg <johannes.berg@intel.com>
----
-
---- a/net/mac80211/tx.c
-+++ b/net/mac80211/tx.c
-@@ -3883,6 +3883,7 @@ begin:
- 	 * The key can be removed while the packet was queued, so need to call
- 	 * this here to get the current key.
- 	 */
-+	info->control.hw_key = NULL;
- 	r = ieee80211_tx_h_select_key(&tx);
- 	if (r != TX_CONTINUE) {
- 		ieee80211_free_txskb(&local->hw, skb);
diff --git a/package/kernel/mac80211/patches/subsys/340-wifi-mac80211-Add-link-iteration-macro-for-link-data.patch b/package/kernel/mac80211/patches/subsys/340-wifi-mac80211-Add-link-iteration-macro-for-link-data.patch
index 1c3bb784dd..46468f2a8e 100644
--- a/package/kernel/mac80211/patches/subsys/340-wifi-mac80211-Add-link-iteration-macro-for-link-data.patch
+++ b/package/kernel/mac80211/patches/subsys/340-wifi-mac80211-Add-link-iteration-macro-for-link-data.patch
@@ -22,7 +22,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
 
 --- a/net/mac80211/ieee80211_i.h
 +++ b/net/mac80211/ieee80211_i.h
-@@ -1237,6 +1237,19 @@ struct ieee80211_sub_if_data *vif_to_sda
+@@ -1252,6 +1252,19 @@ struct ieee80211_sub_if_data *vif_to_sda
  		    ((__link) = sdata_dereference((__sdata)->link[__link_id],	\
  						  (__sdata))))
  
diff --git a/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-extend-beacon-monitoring-for-MLO.patch b/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-extend-beacon-monitoring-for-MLO.patch
index f0226fdff1..b9eb120dfa 100644
--- a/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-extend-beacon-monitoring-for-MLO.patch
+++ b/package/kernel/mac80211/patches/subsys/341-wifi-mac80211-extend-beacon-monitoring-for-MLO.patch
@@ -23,7 +23,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
 
 --- a/net/mac80211/mlme.c
 +++ b/net/mac80211/mlme.c
-@@ -2439,6 +2439,21 @@ static void ieee80211_csa_switch_work(st
+@@ -2467,6 +2467,21 @@ static void ieee80211_csa_switch_work(st
  		}
  	}
  
@@ -45,7 +45,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
  	ieee80211_sta_reset_beacon_monitor(sdata);
  	ieee80211_sta_reset_conn_monitor(sdata);
  }
-@@ -8389,16 +8404,32 @@ void ieee80211_sta_work(struct ieee80211
+@@ -8428,16 +8443,32 @@ void ieee80211_sta_work(struct ieee80211
  	}
  }
  
diff --git a/package/kernel/mac80211/patches/subsys/342-wifi-mac80211-extend-connection-monitoring-for-MLO.patch b/package/kernel/mac80211/patches/subsys/342-wifi-mac80211-extend-connection-monitoring-for-MLO.patch
index 3da06793de..0a41f5eef6 100644
--- a/package/kernel/mac80211/patches/subsys/342-wifi-mac80211-extend-connection-monitoring-for-MLO.patch
+++ b/package/kernel/mac80211/patches/subsys/342-wifi-mac80211-extend-connection-monitoring-for-MLO.patch
@@ -25,7 +25,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
 
 --- a/net/mac80211/mlme.c
 +++ b/net/mac80211/mlme.c
-@@ -4300,9 +4300,6 @@ static void ieee80211_mgd_probe_ap_send(
+@@ -4329,9 +4329,6 @@ static void ieee80211_mgd_probe_ap_send(
  
  	lockdep_assert_wiphy(sdata->local->hw.wiphy);
  
@@ -35,7 +35,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
  	/*
  	 * Try sending broadcast probe requests for the last three
  	 * probe requests after the first ones failed since some
-@@ -4348,9 +4345,6 @@ static void ieee80211_mgd_probe_ap(struc
+@@ -4377,9 +4374,6 @@ static void ieee80211_mgd_probe_ap(struc
  
  	lockdep_assert_wiphy(sdata->local->hw.wiphy);
  
@@ -45,7 +45,7 @@ Signed-off-by: Johannes Berg <johannes.berg@intel.com>
  	if (!ieee80211_sdata_running(sdata))
  		return;
  
-@@ -8440,36 +8434,70 @@ static void ieee80211_sta_bcn_mon_timer(
+@@ -8479,36 +8473,70 @@ static void ieee80211_sta_bcn_mon_timer(
  			 &sdata->u.mgd.beacon_connection_loss_work);
  }
  
diff --git a/package/kernel/mac80211/patches/subsys/343-wifi-mac80211-Make-CONNECTION_MONITOR-optional-for-M.patch b/package/kernel/mac80211/patches/subsys/343-wifi-mac80211-Make-CONNECTION_MONITOR-optional-for-M.patch
index 457a8894f2..3f9f17e168 100644
--- a/package/kernel/mac80211/patches/subsys/343-wifi-mac80211-Make-CONNECTION_MONITOR-optional-for-M.patch
+++ b/package/kernel/mac80211/patches/subsys/343-wifi-mac80211-Make-CONNECTION_MONITOR-optional-for-M.patch
@@ -13,7 +13,7 @@ Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
 
 --- a/net/mac80211/main.c
 +++ b/net/mac80211/main.c
-@@ -1179,9 +1179,6 @@ int ieee80211_register_hw(struct ieee802
+@@ -1190,9 +1190,6 @@ int ieee80211_register_hw(struct ieee802
  		if (WARN_ON(!ieee80211_hw_check(hw, MFP_CAPABLE)))
  			return -EINVAL;
  
diff --git a/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch b/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
index fe9db05cb1..c1833e6067 100644
--- a/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
+++ b/package/kernel/mac80211/patches/subsys/350-mac80211-allow-scanning-while-on-radar-channel.patch
@@ -1,6 +1,6 @@
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -3559,6 +3559,27 @@ static int ieee80211_set_bitrate_mask(st
+@@ -3563,6 +3563,27 @@ static int ieee80211_set_bitrate_mask(st
  	return 0;
  }
  
@@ -28,7 +28,7 @@
  static int ieee80211_start_radar_detection(struct wiphy *wiphy,
  					   struct net_device *dev,
  					   struct cfg80211_chan_def *chandef,
-@@ -3572,7 +3593,7 @@ static int ieee80211_start_radar_detecti
+@@ -3576,7 +3597,7 @@ static int ieee80211_start_radar_detecti
  
  	lockdep_assert_wiphy(local->hw.wiphy);
  
@@ -37,7 +37,7 @@
  		return -EBUSY;
  
  	link_data = sdata_dereference(sdata->link[link_id], sdata);
-@@ -4064,7 +4085,7 @@ __ieee80211_channel_switch(struct wiphy
+@@ -4068,7 +4089,7 @@ __ieee80211_channel_switch(struct wiphy
  
  	lockdep_assert_wiphy(local->hw.wiphy);
  
@@ -77,7 +77,7 @@
  
 --- a/net/mac80211/ieee80211_i.h
 +++ b/net/mac80211/ieee80211_i.h
-@@ -1988,6 +1988,12 @@ int ieee80211_mesh_finish_csa(struct iee
+@@ -2003,6 +2003,12 @@ int ieee80211_mesh_finish_csa(struct iee
  			      u64 *changed);
  
  /* scan/BSS handling */
@@ -90,7 +90,7 @@
  void ieee80211_scan_work(struct wiphy *wiphy, struct wiphy_work *work);
  int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
  				const u8 *ssid, u8 ssid_len,
-@@ -2026,6 +2032,7 @@ void ieee80211_sched_scan_stopped_work(s
+@@ -2041,6 +2047,7 @@ void ieee80211_sched_scan_stopped_work(s
  /* off-channel/mgmt-tx */
  void ieee80211_offchannel_stop_vifs(struct ieee80211_local *local);
  void ieee80211_offchannel_return(struct ieee80211_local *local);
@@ -98,7 +98,7 @@
  void ieee80211_roc_setup(struct ieee80211_local *local);
  void ieee80211_start_next_roc(struct ieee80211_local *local);
  void ieee80211_reconfig_roc(struct ieee80211_local *local);
-@@ -2673,6 +2680,8 @@ bool ieee80211_chandef_s1g_oper(const st
+@@ -2694,6 +2701,8 @@ bool ieee80211_chandef_s1g_oper(const st
  				struct cfg80211_chan_def *chandef);
  void ieee80211_chandef_downgrade(struct cfg80211_chan_def *chandef,
  				 struct ieee80211_conn_settings *conn);
@@ -107,7 +107,7 @@
  static inline void
  ieee80211_chanreq_downgrade(struct ieee80211_chan_req *chanreq,
  			    struct ieee80211_conn_settings *conn)
-@@ -2729,7 +2738,7 @@ void ieee80211_recalc_chanctx_min_def(st
+@@ -2750,7 +2759,7 @@ void ieee80211_recalc_chanctx_min_def(st
  				      struct ieee80211_chanctx *ctx,
  				      struct ieee80211_link_data *rsvd_for,
  				      bool check_reserved);
diff --git a/package/kernel/mac80211/patches/subsys/360-mac80211-factor-out-part-of-ieee80211_calc_expected_.patch b/package/kernel/mac80211/patches/subsys/360-mac80211-factor-out-part-of-ieee80211_calc_expected_.patch
index b34465f3af..ece6cca60e 100644
--- a/package/kernel/mac80211/patches/subsys/360-mac80211-factor-out-part-of-ieee80211_calc_expected_.patch
+++ b/package/kernel/mac80211/patches/subsys/360-mac80211-factor-out-part-of-ieee80211_calc_expected_.patch
@@ -126,7 +126,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	}
 --- a/net/mac80211/ieee80211_i.h
 +++ b/net/mac80211/ieee80211_i.h
-@@ -2789,6 +2789,11 @@ u8 *ieee80211_get_bssid(struct ieee80211
+@@ -2810,6 +2810,11 @@ u8 *ieee80211_get_bssid(struct ieee80211
  
  extern const struct ethtool_ops ieee80211_ethtool_ops;
  
diff --git a/package/kernel/mac80211/patches/subsys/370-wifi-mac80211-add-MLO-support-to-ieee80211_probe_cli.patch b/package/kernel/mac80211/patches/subsys/370-wifi-mac80211-add-MLO-support-to-ieee80211_probe_cli.patch
index 1f9d6a104b..5331eed2c7 100644
--- a/package/kernel/mac80211/patches/subsys/370-wifi-mac80211-add-MLO-support-to-ieee80211_probe_cli.patch
+++ b/package/kernel/mac80211/patches/subsys/370-wifi-mac80211-add-MLO-support-to-ieee80211_probe_cli.patch
@@ -9,7 +9,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
 
 --- a/net/mac80211/cfg.c
 +++ b/net/mac80211/cfg.c
-@@ -4320,7 +4320,9 @@ static int ieee80211_probe_client(struct
+@@ -4324,7 +4324,9 @@ static int ieee80211_probe_client(struct
  	struct ieee80211_tx_info *info;
  	struct sta_info *sta;
  	struct ieee80211_chanctx_conf *chanctx_conf;
@@ -19,7 +19,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	int ret;
  
  	/* the lock is needed to assign the cookie later */
-@@ -4335,7 +4337,23 @@ static int ieee80211_probe_client(struct
+@@ -4339,7 +4341,23 @@ static int ieee80211_probe_client(struct
  
  	qos = sta->sta.wme;
  
@@ -44,7 +44,7 @@ Signed-off-by: Felix Fietkau <nbd@nbd.name>
  	if (WARN_ON(!chanctx_conf)) {
  		ret = -EINVAL;
  		goto unlock;
-@@ -4367,14 +4385,15 @@ static int ieee80211_probe_client(struct
+@@ -4371,14 +4389,15 @@ static int ieee80211_probe_client(struct
  	nullfunc->frame_control = fc;
  	nullfunc->duration_id = 0;
  	memcpy(nullfunc->addr1, sta->sta.addr, ETH_ALEN);
-- 
2.51.0

